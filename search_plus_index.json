{"./":{"url":"./","title":"Overview","summary":"page description","keywords":"","body":"Please note this guide is currently far from finished Overview So you want to hackintosh a laptop? Can't wrap your head around RehabMan's confusing guides? Well, here's the vanila laptop guide for you. This guide will explain everything you need to know to hackintosh a laptop. For Windows and Linux we will use the internet install method, and for macOS we will use createinstallmedia (offline install). Before you begin KNOW YOUR HARDWARE We can't stress this enough. If you don't know your hardware and don't know how to find it, hackintoshing probably isn't for you. READ TWICE AND CAREFULLY BEFORE ASKING This is not a very welcoming community for people who do not want to do some self-study and learn from other's findings and instead wait for someone to spoon-feed them information and make things work for them. Read The Fucking Manual and work your way through it and do some intense googling. If you're ready, get to the next step. Good Luck! ðŸŽŠ "},"overview/whatdis.html":{"url":"overview/whatdis.html","title":"What is this","keywords":"","body":"What is this whole mess? Glad you asked! As you may know, real Macs run macOS (if you say iOS, you can just close this tab/window and go back), and that OS is crafted specifically for those devices. However, some of us may have been an old Mac user or uses Mac-specific applications or is used to using macOS for various reasons, but don't want to spend $$$$ on a laptop that is expensive and may break and there is no way to get data back once it's messed up cough MBP13,x+ cough. With this guide, you'll be taught how to install macOS on your intel powered laptop, and it will include the following: Overview Will it work on your hardware? What's the limitations? Guide Overview Disclaimer (yes, we wont be held responsible for your actions basically) Requirements Terminology Preparation Preparing the destination computer Overview on the installer making guide Making the installer Configuring the Boot Manager Installation Installation process Post Installation Installing the rest Fixes Basic ACPI patches Power Management tweaks VoodooI2C troubleshooting Beatify your booting OS Useful Links "},"overview/compatibility.html":{"url":"overview/compatibility.html","title":"Hardware compatibility","keywords":"","body":"Hardware compatibility This guide will cover laptops with Intel Core CPUs from Sandy Bridge and above. Laptops with AMD CPUs are not supported because of the limitations covered in macOS limitations. CPUs that are not supported by this guide: AMD laptop CPUs Intel Pentium Intel Celeron Intel ATOM ARM devices "},"overview/macos-limits.html":{"url":"overview/macos-limits.html","title":"macOS limitations","keywords":"","body":"macOS limitations With laptops, there are several limitations regarding hardware that will not work. Low End iGPUs With macOS, support for iGPUs start at the GT2 tier, this means many low end iGPUs found on Celerons and Pentiums will not work. For a full list, see the GPU Buyers Guide Fingerprint sensors There is no way to emulate the Touch ID sensor as of currently, so fingerprint sensors will not work. Discrete GPUs 90% of discrete GPUs will not work because they are wired in a configuration that macOS doesn't support (switchable graphics). With NVIDIA discrete GPUs, this is usually called Optimus. It is not possible to utilize these dGPUs for the internal display, so it is generally advised to disable them and power them off (will be covered later in this guide.) However, in some cases, the discrete GPU powers any external outputs (HDMI, mini DisplayPort, etc.), which may or may not work; in the case that it will work, you will have to keep the card on and running. However, there are some laptops which rarely do not have switchable graphics, so the discrete card can be used (if supported by macOS), but the wiring and setup usually causes issues. AMD CPU laptops AMD CPU laptops, while theoretically able to work, are not practical for the following reasons: No CPU power management, so battery life will be bad Non-native support, requiring kernel patches, resulting in delayed updates No support for AMD integrated graphics (Radeon R5, R7, etc.) Most WiFi cards Most WiFi cards that come with laptops are not supported as they are usually Intel/Qualcomm. If you are lucky, you may have a supported Atheros card, but support only runs up to High Sierra (Mojave works with AirportAtheros40 from High Sierra, but not with Catalina). The best option is getting a Broadcom card; see MykolaG's WiFi buyer's guide for recommendations. Samsung PM981 NVMe SSDs These SSDs are not compatible OOB(causing kernel panics) and so require NVMEFix.kext fixes these kernel panics On a related note, Samsung 970 EVO Plus NVMe SSDs also had the same problem but it was fixed in a firmware update; get the update (Windows via Samsung Magician or bootable ISO) here. Also to note, laptops that use Intel Optane Memory or Micron 3D XPoint for HDD acceleration are unsupported in macOS. These drives MUST be removed or else macOS won't boot at all. Thunderbolt USB C ports (Hackintosh) Thunderbolt support is currently still iffy in macOS, even more so with Alpine Ridge controllers, which most current laptops have. There have been attempts to keep the controller powered on, which allows Thunderbolt and USB C hotplug to work, but it comes at the cost of kernel panics and/or USB C breaking after sleep. If you want to use the USB C side of the port and be able to sleep, you must plug it in at boot and keep it plugged in. Note: This does not apply to USB C only ports - only Thunderbolt 3 and USB C combined ports. Windows Hello Face Recognition Some laptops come with WHFR that is I2C connected (and used through your iGPU), those will not work. Some laptops come with WHFR that is USB connected, if you're lucky, you may get the camera functionality, but nothing else. Intel Smart Sound Technology Laptops with Intel SST will not have anything connected through them (usually internal mic) work, as it is not supported. You can check with Device Manager on Windows. Headphone Jack Combo Some laptops with a combo headphone jack may not get Audio Input through them and will have to either use the built-in microphone or an external Audio Input device through USB. "},"overview/process-overview.html":{"url":"overview/process-overview.html","title":"How does it go?","keywords":"","body":"How does it go? Download macOS Make the installer Install Clover and configure kexts, config.plist and drivers Boot the installer Install Boot the macOS partition More install Postinstall "},"overview/disclaimer.html":{"url":"overview/disclaimer.html","title":"Disclaimer","keywords":"","body":"Disclaimer We are not responsible for bricked devices, dead hard drives, thermonuclear war, or you getting fired because you got a kernel panic and didn't save your work. You are responsible for reading everything carefully before you do anything. Do your research and ask for support if you have any questions or issues before trying random things on the internet because \"it's the internet\". If you do, YOU are choosing to follow random things on the internet, and if YOU point the finger at us for messing up your device, WE will laugh at you. "},"overview/requirements.html":{"url":"overview/requirements.html","title":"Requirements","keywords":"","body":"Requirements Before you start tinkering with your laptop, make sure you have prepared the following: Physical requirements [CRUCIAL] A functioning brain [CRUCIAL] Time and patience. Don't start working on this if you have deadlines or important work. We are not responsible of the waste of time and any data lost during this process. [CRUCIAL] KNOW YOUR HARDWARE Your CPU name, generation Your RAM size (and slots used if needed) Your GPUs (All of them, Intel, AMD, Nvidia. You may have 2 GPUs, only the Intel one will work, no questions asked) Your storage devices (HDD/SSD, SATA/M.2, NVME/AHCI/RAID/IDE configuration. Note: Only NVME and AHCI/M.2 or AHCI/SATA will work. Other configurations may be harder to get by. RST users need to disable it, it can be named Intel Rapid Storage, RST or RAID) Your screen resolution Your audio codec Your laptop model Your LAN or Ethernet chipset Your WLAN/BT chipset [CRUCIAL] A BASIC KNOWLEDGE ON COMMAND LINES AND HOW TO USE A TERMINAL/COMMAND PROMPT This is not just [CRUCIAL], this is the basis of this whole guide. Don't come crying at me because you don't know how to cd to a directory or delete a file. [CRUCIAL] A machine that is compatible as seen in the Compatibilty section. [CRUCIAL] A minimum of: 8GB USB if you're going to follow the offline method 4GB USB if you're going to follow the online method Note: if you have a rooted android phone, look for DriveDroid, and make sure you have a shared internal storage (no separate /data partition) usually all phones made after 2012 should be like that, so if yours is fairly new it will handle it just fine. Note2: use a USB2.0 drive, HDDs may not be a good choice, also if you don't have any USB2.0, plug the USB in a USB2.0 port if available, or use a USB extension cord that doesn't support USB3.0, this way the USB3.0 drive will run in USB2.0 mode. [CRUCIAL] An Ethernet connection (no wifi, no wifi dongles, Ethernet USB adapter may work depending on macOS support) and you must know your LAN card's model (and your internet speed) You must either have a physical lan port, or a compatible macOS ethernet dongle/adapter, or in case your have a compatible wifi card, it's also good but not recommended (unless it's the only way to go) For people who can't use ethernet but have an android phone, you can connect your android phone to WiFi and then tether it using USB. For iOS users: (taken from Carcraftz) iOS users can do this as well but you need the Tetherme tweak on a jailbroken iPhone. Unfortnunately if you are not on the right version (any ios version up to 12.1.2) this is not possible. :/ A fast internet connection Users have complained of slow or locked up downloads, that's mainly due to slow or unstable internet. This is crucial for the online method, offline can get away with it. A Proper OS Installation: Be it: macOS (a fairly recent one would be better) Windows (Windows 10, 1703 or newer) Linux (with python2.7 or later), make sure it's clean and properly functioning. For online installer, 15GB of free space on the drive you're working on. On Windows, your OS disk (C:) must have 15GB free at least. For offline installer, 30GB of free space on macOS's drive. Some googling skills, which a lot of you lack sadly. Non-physical requirements For offline installer A macOS environment: Hack Mac (recommended) VM (not really recommended, but if you have to, then you gotta use what you have) 30GB of free space Python 2.7 or greater (you already have that on macOS) ProperTree [Recommended]: a simple tool to edit plist files, from /u/corpnewt https://github.com/corpnewt/ProperTree Or text editor: Notepad++, Sublime Text, VSCode... Note: on October/fall 2018 Windows Update, the native notepad can work too. Older versions of windows must use a 3rd party text editor. If you don't know what this is, get a one of the text editors above. For online installer Python 2.7 or greater: For Windows, get it from https://www.python.org/downloads/windows/ and make sure you enable \"add to PATH\" in the install DO NOT use the python release in the Microsoft Store, get it from the official website. For linux users, install it if you don't have it following your distro's tools For macOS users, you already have 2.7+ version installed, no need for extra tools ProperTree [Recommended]: a simple tool to edit plist files, from /u/corpnewt https://github.com/corpnewt/ProperTree Or text editor: Notepad++, Sublime Text, VSCode... Note: on October/fall 2018 Windows Update, the native notepad can work too. Older versions of windows must use a 3rd party text editor. If you don't know what this is, get a one of the text editors above. gibMacOS: a sweet tool from /u/corpnewt https://github.com/corpnewt/gibMacOS if you have git on windows use it to clone the repo if you don't, press Clone or Download button and download as Zip, extract it somewhere Other software requirements will be downloaded thorough the guide (OS specific) "},"overview/terminology.html":{"url":"overview/terminology.html","title":"Terminology","keywords":"","body":"Terminology macOS: Apple's own OS used for Mac machines and \"What makes a Mac a Mac\". Windows: Microsoft's proprietary OS that is used and supported on a wide range of devices (stay with this OS if you don't want headaches) Linux: is a family of open source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is typically packaged in a Linux distribution. (sauce: trusty Wikipedia) Distros: short for Distributions, although it's not something that is bad, Linux distros are how linux is distributed, however when it comes to macOS, it's a mixed macOS installer with a bunch of tools that are not from Apple, do not use macOS Distros Hackintosh: the process of installing macOS onto a PC, note that hackintosh IS NOT the OS, it is also refered to the machine that was \"hacked\" to get macOS running on it. EG: I installed macOS on this Windows machine, therfore I made a hackintosh. But I did NOT install \"hackintosh\". Bootloader: a piece of software that loads an OS, usually made by the OS creators. Clover IS NOT a bootloader per se (explanation down bellow). Boot Manager: a piece of software that manages bootloaders, and we have many of those: Clover, Systemd-boot, OpenCore, rEFInd, rEFIt... CLOVER: a piece of software made by the Clover team that have a lot of features like patching and/or booting macOS/OS X/Mac OS X, Windows and Unix/Linux OSes and many other features. It is the go-to boot manager for hackintoshing. OpenCore: the new hotness on the hackintosh scene, made with security in mind by the Acidanthera team, has faster booting and lighter weight than Clover. It is a lot more involved but also supports many Mac features a lot more natively than Clover (like Hibernation, FileVault2, Boot HotKeys...). ACPI: the Advanced Configuration and Power Interface (ACPI) provides an open standard that operating systems can use to discover and configure computer hardware components, to perform power management by (for example) putting unused components to sleep, and to perform status monitoring. (sauce: trusty Wikipedia) Kexts: also known as Kernel Extensions, it's macOS's drivers. They're used to perform different tasks like device drivers or for a different purpose (in hackintoshing) like patching the OS or injecting information or running tasks. Kexts are not the only playing factor in a good hackintosh, they're sometimes paired with ACPI patches and fixes. BIOS: Basic Input/Output System, is firmware used to perform hardware initialization during the booting process (power-on startup), and to provide runtime services for operating systems and programs. The BIOS firmware comes pre-installed on a personal computer's system board, and it is the first software to run when powered on. (sauce: trusty Wikipedia) It's a Legacy piece of software that was made back in the 70s and still used to this day due to its maturity. UEFI: The Unified Extensible Firmware Interface (UEFI) is a specification that defines a software interface between an operating system and platform firmware. UEFI replaces the legacy Basic Input/Output System (BIOS) firmware interface originally present in all IBM PC-compatible personal computers, with most UEFI firmware implementations providing support for legacy BIOS services. UEFI can support remote diagnostics and repair of computers, even with no operating system installed. (sauce: trusty Wikipedia) UEFI Drivers: Like any other OS, UEFI have drivers and they're loaded by Clover or OpenCore, they're also meant to load devices or perform other tasks like patching macOS's boot.efi and so on. You may find them as Clover Driver or OpenCore Drivers, they're all UEFI drivers. (Note: use the drivers that are meant for that specific boot manager). EFI: It can denote two things: Mac's firmware, which the same as UEFI, but pretty modified for Macs only, so not so \"Universal\" The partition on your hard drive that stores software read by the UEFI to load OSes (like windows bootloader) or UEFI Applications (like Clover), it's FAT32 formatted and has an ID type of EF00 (in hex). Can be named ESP or SYSTEM partition, and it's sized from 100MB to 400MB usually but the size doesn't reflect the function of it (it all depends on the OEMs and OS choices when installing.) MBR: Master Boot Record is a special type of boot sector at the very beginning of partitioned computer mass storage devices like fixed disks or removable drives intended for use with IBM PC-compatible systems and beyond. The concept of MBRs was publicly introduced in 1983 with PC DOS 2.0. The MBR holds the information on how the logical partitions, containing file systems, are organized on that medium. The MBR also contains executable code to function as a loader for the installed operating systemâ€”usually by passing control over to the loader's second stage, or in conjunction with each partition's volume boot record (VBR). This MBR code is usually referred to as a boot loader. (sauce: trusty Wikipedia) This format is used on BIOS/Legacy setups. The MBT format supports a maximum of 2TiB of size and a max of 4 Primary partitions. GPT: GUID Partition Table (GPT) is a standard for the layout of partition tables of a physical computer storage device, such as a hard disk drive or solid-state drive, using universally unique identifiers, which are also known as globally unique identifiers (GUIDs). Forming a part of the Unified Extensible Firmware Interface (UEFI) standard (Unified EFI Forum-proposed replacement for the PC BIOS), it is nevertheless also used for some BIOS systems, because of the limitations of master boot record (MBR) partition tables, which use 32 bits for logical block addressing (LBA) of traditional 512-byte disk sectors. (sauce: trusty Wikipedia) Usually this is the disk format you want to use on a UEFI system. "},"preparations/overview.html":{"url":"preparations/overview.html","title":"Overview","keywords":"","body":"Overview This part of the guide will cover creating a macOS installer, installing and setting up Clover, and firmware settings. "},"installer-guide/opencore-efi.html":{"url":"installer-guide/opencore-efi.html","title":"Creating the USB","keywords":"","body":"Creating the USB Supported version: 0.5.7 Requirements: OpenCorePkg, highly recommend running the debug version to show more info AppleSupportPkg ProperTree or Xcode to edit .plist files (OpenCore Configurator is another tool but is heavily outdated and the Mackie version is known for corruption. Please avoid these kinds of tools at all costs!). Cleaned NVRAM(This is seriously important if you used Clover before, as many variables will remain causing conflicts. Luckily with OC you can press CleanNvram in the boot picker when AllowNvramReset is enabled in your config) Basic knowledge of how a Hackintosh works and what files yours requires(ie: Type of network controller). You must remove Clover from your system entirely if you wish to use it as your main boot-loader. Keep a backup of your Clover based EFI. See here on what needs to be cleaned: Clover Conversion Making the installer Depending on which OS you're on, see your specific section on making the USB, then return here on setting up Opencore: macOS users Windows users Linux users Setting up the EFI To setup OpenCoreâ€™s folder structure, youâ€™ll want to grab the EFI folder found in OpenCorePkg's releases page(this will already be done on the BOOT USB drive for windows users): Now something you'll notice is that it comes with a bunch of files in Drivers and Tools folder, we don't want most of these: Remove from Drivers: OpenUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on Ivy Bridge and newer NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware HiiDatabase.efi Used for fixing GUI support like OpenShell.efi on Sandy Bridge and older Remove everything from Tools: BootKicker.efi Used for fixing the Apple picker on genuine Macs CleanNvram.efi We'll be using OpenCore's built-in function GopStop.efi Used for testing GOP HdaCodecDump.efi Used for finding info for AudioDxe setup, this is not covered in this guide so not needed VerifyMsrE2.efi Used for verifying MSR lock, for install we can ignore A cleaned up EFI: Now you can place your necessary firmware drivers(.efi) from AppleSupportPkg into the Drivers folder and Kexts/ACPI into their respective folders. Please note that UEFI drivers from Clover are not supported with OpenCore!(EmuVariableUEFI, AptioMemoryFix, OsxAptioFixDrv, etc). Please see the Clover firmware driver conversion for more info on supported drivers and those merged into OpenCore. Here's what a populated EFI can look like: Reminder: SSDTs and custom DSDTs go in ACPI folder Kexts go in Kexts folder Firmware drivers(.efi) go in the Drivers folder Now head to Gathering Files to get the needed kexts and firmware drivers "},"installer-guide/mac-install.html":{"url":"installer-guide/mac-install.html","title":"macOS install","keywords":"","body":"Making the installer in macOS Supported version: 0.5.7 While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. Note for legacy users If you want to use OpenCore on a system without UEFI, please follow the Legacy Install section first, after you can continue following the Base folder structure section To start we'll want to grab ourselves a copy of macOS, you can skip this and head to formatting the USB if you're just making a bootable OpenCore stick and not an installer. For everyone else, here's your options for obtaining macOS directly from Apple's servers: AppStore links: High Sierra, Mojave, Catalina GibMacOS: Download the full macOS installer Run BuildmacOSInstallApp then drag and drop the macOS Downloads folder found in GibMacOS Next we'll want to format our USB HFS+/MacOS Journaled with GUID partition map, must be 12GB for macOS Catalina.as-is recommended to name it MyVolume as the script below can be used as-is. Next run the createinstallmedia command provided by Apple, note that the command is made for USB's formatted with the name MyVolume: sudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume This will take some time so may want to grab a coffee or continue reading the guide(to be fair you really shouldn't be following this guide step by step without reading the whole thing first) Setting up OpenCore's EFI environment Setting up OpenCore's EFI environment is simple, all you need to do is mount our EFI system partition. This is automatically made when we format with GUID but is hidden from the end user, this is where our friend mountEFI comes in: You'll notice that once we open the EFI partition, it's empty. This is where the fun begins. Now with all this done, return to Creating the USB to finish up your work "},"installer-guide/winblows-install.html":{"url":"installer-guide/winblows-install.html","title":"Windows install","keywords":"","body":"Making the installer in Windows Supported version: 0.5.7 While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. To start you'll need the following: 4GB USB Stick GibMacOS Downloading macOS To start, open gibMacOS.bat as Admin and select Toggle Recovery-Only: Now search through for your desired version of macOS, for this example we'll choose option 5 for macOS Catalina: This will download the RecoveryHDMetaDmg.pkg to \\gibmacos-master\\macOS Downloads\\publicrelease\\xxx-xxxxx - 10.x.x macOS xxx Making the installer Next open makeinstall.bat as Admin and select your drive with option O for OpenCore( ex: 1O). Once your drive is formatted, it will then ask you for the RecoveryHDMetaDMG.pkg that we downloaded earlier. Top right of the file window will let you copy the file path: makeinstall will finish up by installing OpenCore to your USB's EFI System Partition, you can find this partition labeled as BOOT: Now with all this done, return to Creating the USB to finish up your work "},"installer-guide/linux-install.html":{"url":"installer-guide/linux-install.html","title":"Linux install","keywords":"","body":"Making the installer in Linux Supported version: 0.5.7 While you don't need a fresh install of macOS to use OpenCore, some users prefer having a fresh slate with their boot manager upgrades. To start you'll need the following: 4GB USB Stick GibMacOS Downloading macOS Now to start, run gibmacOS.py in terminal with Toggle Recovery-Only: python gibMacOS.command -r Now search through for your desired version of macOS, for this example we'll choose option 5 for macOS Catalina: This will download the RecoveryHDMetaDmg.pkg to \\gibmacos-master\\macOS Downloads\\publicrelease\\xxx-xxxxx - 10.x.x macOS xxx Making the installer This section will target making the necessary partitions in the USB device. You can use your favorite program be it gdisk fdisk parted gparted or gnome-disks. This guide will focus on gdisk as it's nice and can change the partition type later on, as we need it so that macOS Recovery HD can boot. (the distro used here is Ubuntu 18.04, other versions or distros may work) Credit to midi1996 for his work on the hackintosh-internet-install-gitbook guide which this is based off of. Method 1 In terminal: run lsblk and determine your USB device block run sudo gdisk /dev/ if you're asked what partition table to use, select GPT. send p to print your block's partitions (and verify it's the one needed) send o to clear the partition table and make a new GPT one (if not empty) confirm with y send n partition number: keep blank for default first sector: keep blank for default last sector: keep blank for whole disk Hex code or GUID: 0700 for Microsoft basic data partition type send w Confirm with y In some cases a reboot is needed, but rarely, if you want to be sure, reboot your computer. You can also try re-plugging your USB key. Close gdisk by sending q (normally it should quit on its own) Use lsblk to determin your partition's identifiers run sudo mkfs.vfat -F 32 -n \"OPENCORE\" /dev/ to format your USB to FAT32 and named OPENCORE then cd to gibmacos-master/macOS\\ Downloads/publicrelease/xxx-xxxxx - 10.x.x macOS xxx and you should get to a pkg file download p7zip-full (depending on your distro tools) for ubuntu/ubuntu-based run sudo apt install p7zip-full for arch/arch-based run sudo pacman -S p7zip for the rest of you, you should know for all distros: make sure you're using bash for 7zip to work. run this 7z e -txar *.pkg *.dmg; 7z e *.dmg */Base* to extract BaseSystem.dmg and BaseSystem.chunklist mount your USB partition with udisksctl (udisksctl mount -b /dev/, no sudo required in most cases) or with mount (sudo mount /dev/ /where/your/mount/stuff, sudo is required) cd to your usb driver and mkdir com.apple.recovery.boot in the root of your FAT32 USB partition now cp or rsync both BaseSystem.dmg and BaseSystem.chunklist into com.apple.recovery.boot folder. Method 2 (in case 1 didn't work) In terminal: run lsblk and determine your USB device block run sudo gdisk /dev/ if you're asked what partition table to use, select GPT. send p to print your block's partitions (and verify it's the one needed) send o to clear the partition table and make a new GPT one (if not empty) confirm with y send n partition number: keep blank for default first sector: keep blank for default last sector: +200M to create a 200MB partition that will be named later on OPENCORE Hex code or GUID: 0700 for Microsoft basic data partition type send n partition number: keep blank for default first sector: keep blank for default last sector: keep black for default (or you can make it +3G if you want to partition further the rest of the USB) Hex code or GUID: af00 for Apple HFS/HFS+ partition type send w Confirm with y In some cases a reboot is needed, but rarely, if you want to be sure, reboot your computer. You can also try re-plugging your USB key. Close gdisk by sending q (normally it should quit on its own) Use lsblk again to determine the 200MB drive and the other partition run sudo mkfs.vfat -F 32 -n \"OPENCORE\" /dev/ to format the 200MB partition to FAT32, named OPENCORE then cd to gibmacos-master/macOS\\ Downloads/publicrelease/xxx-xxxxx - 10.x.x macOS xxx and you should get to a pkg file download p7zip-full (depending on your distro tools) for ubuntu/ubuntu-based run sudo apt install p7zip-full for arch/arch-based run sudo pacman -S p7zip for the rest of you, you should know for all distros: make sure you're using bash for 7zip to work. run this 7z e -txar *.pkg *.dmg; 7z e *.dmg */Base* this will extract the recovery from the pkg through extracting the recovery update package then extracting the recovery dmg then the hfs image from it (BaseSystem.dmg). download dmg2img (available on most distros) run dmg2img -l BaseSystem.dmg and determin which partition has disk image property run dmg2img -p -i BaseSystem -o to extract and write the recovery image to the partition disk It will take some time. A LOT if you're using a slow USB (took me about less than 5 minutes with a fast USB2.0 drive). Now with all this done, return to Creating the USB to finish up your work "},"OpenCore/ktext.html":{"url":"OpenCore/ktext.html","title":"Gathering Files","keywords":"","body":"Gathering files Supported version: 0.5.7 This section is for gathering miscellaneous files for booting macOS, we do expect you to know your hardware well before starting and hopefully made a Hackintosh before as we won't be deep diving in here. What's the best way to figure out if my hardware is supported? See the supported hardware section for some better insight into what macOS requires to boot, hardware support between Clover and OpenCore are quite similar. Firmware Drivers These are the drivers used by OpenCore, for the majority of systems you only need 3 .efi drivers to get up and running: ApfsDriverLoader.efi Needed for seeing APFS volumes(ie. macOS) VboxHfs.efi or HfsPlus.efi Needed for seeing HFS volumes(ie. macOS Installers and Recovery partitions/images). Do not mix HFS drivers OpenRuntime.efi Replacement for AptioMemoryFix.efi, used for patching boot.efi for NVRAM fixes and better memory management. For legacy users: OpenUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on UEFI(Ivy Bridge and newer) NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware, not needed if you're not using an NVMe drive XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware, not needed if you're not using a USB 3.0 expansion card HfsPlusLegacy.efi Legacy variant of HfsPlus, used for systems that lack RDRAND instruction support. This is generally seen on SandyBridge and older For a full list of compatible drivers, see 11.2 Properties in the OpenCorePkg Docs. These files will go in your Drivers folder in your EFI Kexts A kext is a kernel extension, you can think of this as a driver for macOS, these files will go into the Kexts folder in your EFI All kext listed below can be found pre-compiled in the Kext Repo. Kexts here are compiled each time there's a new commit. Must haves: VirtualSMC Emulates the SMC chip found on real macs, without this macOS will not boot Alternative is FakeSMC which can have better or worse support, most commonly used on legacy hardware. Lilu A kext to patch many processes, required for AppleALC and WhateverGreen and recommended for VirtualSMC VirtualSMC Plugins: SMCProcessor.kext Used for monitoring CPU temperature SMCSuperIO.kext Used for monitoring fan speed SMCLightSensor.kext Used for the ambient light sensor on laptops Do not use if you don't have an ambient light sensor, can cause issues otherwise SMCBatteryManager.kext Used for measuring battery readouts on laptops Do not use until battery has been poperly patched, can cause issues otherwise Graphics: WhateverGreen Used for graphics patching DRM, boardID, framebuffer fixes, etc, all GPUs benefit from this kext. Audio: AppleALC Used for AppleHDA patching, used for giving you onboard audio. AMD 15h/16h may have issues with this and Ryzen/Threadripper systems rarely have mic support Ethernet: IntelMausiEthernet Required for Intel NICs, chipsets that are based off of I211-AT will need the SmallTreeIntel82576 kext AtherosE2200Ethernet Required for Atheros and Killer NICs RealtekRTL8111 Required for Realtek NICs USB: USBInjectAll Used for injecting Intel USB controllers, Ice Lake and Comet Lake systems will likely need XHCI-unsupported as well Keyboard and mouse: VoodooPS2 Required for systems with PS2 keyboards and trackpads Trackpad users should also pair this with VoodooInput(This must come before VoodooPS2 in your config.plist) VoodooI2C Used for fixing I2C devices To be paired with a plugin: VoodooI2CHID - Implements the Microsoft HID device specification. VoodooI2CElan - Implements support for Elan proprietary devices. (does not work on ELAN1200+, use the HID instead) VoodooI2CSynaptics - Implements support for Synaptics proprietary devices. VoodooI2CFTE - Implements support for the FTE1001 touchpad. VoodooI2CUPDDEngine - Implements Touchbase driver support. To figure out what kind of keyboard and trackpad you have check DeviceManager in Windows or dmesg |grep input in Linux WiFi and Bluetooth: AirportBrcmFixup Used for patching non-Apple Broadcom cards, will not work on intel, Killer, Realtek, etc BrcmPatchRAM Used for uploading firmware on broadcom bluetooth chipset, required for all non-Apple Airport cards. To be paired with BrcmFirmwareData.kext BrcmPatchRAM3 for 10.14+ (must be paired with BrcmBluetoothInjector) BrcmPatchRAM2 for 10.11-10.14 BrcmPatchRAM for 10.10 or older The order in Kernel -> Add should be: BrcmBluetoothInjector BrcmFirmwareData BrcmPatchRAM3 Extra's: VoodooTSCSync Some Asus laptops had firmware updates breaking their TSC sync making macOS get out of sync itself and run a lot slower NVMeFix Used for fixing power management and initialization on non-Apple NVMe, requires macOS 10.14 or newer NoTouchID Recommended for SMBIOS that include a TouchID sensor to fix auth issues Please refer to Kexts.md for a full list of supported kexts SSDTs So you see all those SSDTs in the AcpiSamples folder and wonder whether you need any of them. For us, we will be going over what SSDTs you need in your specific ACPI section of the config.plist, as the SSDTs you need are platform specific. With some even system specific where they need to be configured and you can easily get lost if I give you a list of SSDTs to choose from now. Getting started with ACPI has an extended section on SSDTs including compiling them on different platforms. A quick TL;DR of needed SSDTs(This is source code, you will have to compile them into a .aml file): Ivy Bridge: SSDT-EC CPU-PM Haswell: SSDT-PLUG SSDT-EC Skylake: SSDT-PLUG SSDT-EC-USBX Kabylake: SSDT-PLUG SSDT-EC-USBX Coffeelake: SSDT-PLUG SSDT-EC-USBX SSDT AWAC SSDT-PMC Haswell-E: SSDT-PLUG SSDT-EC Broadwell-E: SSDT-PLUG SSDT-EC Skylake-X: SSDT-PLUG SSDT-EC-USBX AMD: SSDT-EC-USBX Now head to your specific CPU section to setup your config.plist Intel Config.plist Ivy Bridge Haswell Skylake Kaby Lake Coffee Lake Intel HEDT Config.plist Skylake-X AMD Config.plist AMD "},"OpenCore/config.html":{"url":"OpenCore/config.html","title":"OpenCore config","keywords":"","body":"Creating our config For all Issues with OpenCore section, blame Slav Now comes the fun part, making our config.plist. Follow your respective section for configuring, the typical breakdown of how to follow: Ivy Bridge 3000 series, 2012 era Haswell 4000 series, 2013 era Broadwell 5000 series, 2014 era Skylake 6000 series, 2015-2016 era Kaby Lake 7000 series, 2017 era Kaby Lake-R and Amber Lake also apply Coffee Lake(8th Gen) 8000 series, 2017-2018 era Coffee Lake Plus(9th Gen) 9000 series, 2019 era Comet Lake also applies "},"OpenCore/config-laptop.plist/ivy-bridge.html":{"url":"OpenCore/config-laptop.plist/ivy-bridge.html","title":"Ivy Bridge","keywords":"","body":"Ivy Bridge Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: CPU-PM Needed for proper CPU power management, you will need to run Pike's ssdtPRGen.sh script to generate this file. This will be run in post install. SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, for us we care about enabling SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and certain Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Intel HD Graphics 4000 66010001 01006601 4 96MB 24MB 1536MB LVDS1 HDMI1 DP2 Intel HD Graphics 4000 66010002 02006601 1 64MB 24MB 1536MB LVDS1 Intel HD Graphics 4000 1 * 66010003 03006601 4 64MB 16MB 1536MB LVDS1 DP3 Intel HD Graphics 4000 2 66010004 04006601 1 32MB 16MB 1536MB LVDS1 Intel HD Graphics 4000 66010008 08006601 3 64MB 16MB 1536MB LVDS1 DP2 Intel HD Graphics 4000 3 66010009 09006601 3 64MB 16MB 1536MB LVDS1 DP2 Special Notes: For these cards, no device-id property is required. 1 : to be used with 1366 by 768 displays or lower (main) 2 : to be used with 1600 by 900 displays or higher (main) 3 : to be used with some devices that have eDP connected monitor (contrary to classical LVDS), must be tested with 1 and 2 first then try this. VGA is not supported (unless it's running through a DP to VGA internal adapter, which apparently only rare devices will see it as DP and not VGA, it's all about luck.) For 04006601 platform, as you can tell, it has only one output, which is not enough for external connectors (HDMI/DP), you may need to add these extra parameters (credit to Rehabman) | Key | Type | Value | Explanation | | :--- | :--- | :--- | :--- | | framebuffer-patch-enable | Number | 1 | enabling the semantic patches in principle (from WEG manual) | | framebuffer-memorycount | Number | 2 | Matching FBMemoryCount to the one on 03006601 (1 on 04 vs 2 on 03) | | framebuffer-pipecount | Number | 2 | Matching PipeCount to the one on 03006601 (3 on 04 vs 2 on 03) | | framebuffer-portcount | Number | 4 | Matching PortCount to the one on 03006601 (1 on 04 vs 4 on 03) | | framebuffer-stolenmem | Data | 00000004 | Matching STOLEN memory to 64MB (0x04000000 from hex to base 10 in Bytes) to the one on 03006601Check here for more information. | | framebuffer-con1-enable | Number | 1 | This will enable patching on connector1 of the driver. (Which is the second connector after con0, which is the eDP/LVDS one) | | framebuffer-con1-alldata | Data | 02050000 00040000 07040000 03040000 00040000 81000000 04060000 00040000 81000000 | When using all data with a connector, either you give all information of that connector (port-bused-type-flag) or that port and the ones following it, like in this case.In this case, the ports in 04 are limited to 1:05030000 02000000 30020000 (which corresponds to port 5, which is LVDS)However on 03 there are 3 extra ports:05030000 02000000 30000000 (LVDS, con0, like 04)02050000 00040000 07040000 (DP, con1)03040000 00040000 81000000 (DP, con2)04060000 00040000 81000000 (DP, con3)Since we changed the number of PortCount to 4 in a platform that has only 1, that means we need to define the 3 others (and we that starting with con1 to the end). | Some laptops from this era came with a mixed chipset setup, using Ivy Bridge CPUs with Sandy Bridge chipsets which creates issues with macOS since it expects a certain IMEI ID that it doesn't find and would get stuck at boot, to fix this we need to fake the IMEI's IDs in these models To know if you're affected check if your CPU is an intel Core ix-3xxx and your chipset is Hx6x (for example a laptop with HM65 or HM67 with a Core i3-3110M) In your config add a new PciRoot device named PciRoot(0x0)/Pci(0x16,0x0) Key: device-id Type: Data Value: 3A1E0000 PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Ivy Bridge example, we'll chose the iMac13,2 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBookAir5,1 Dual Core 17w iGPU: HD 4000 11\" MacBookAir5,2 Dual Core 17w iGPU: HD 4000 13\" MacBookPro10,1 Quad Core 45w iGPU: HD 4000 + dGPU: GT650M 15\" MacBookPro10,2 Dual Core 35w(High End) iGPU: HD 4000 13\" Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro10,2 SMBIOS Info # ####################################################### Type: MacBookPro10,2 Serial: C02KCYZLDNCW Board Serial: C02309301QXF2FRJC SmUUID: A154B586-874B-4E57-A1FF-9D6E503E4580 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 32MB Post-install "},"OpenCore/config-laptop.plist/haswell.html":{"url":"OpenCore/config-laptop.plist/haswell.html","title":"Haswell","keywords":"","body":"Haswell Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, for us we care about enabling SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and certain Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Intel HD Graphics 4400 160a000c 0c00160a 3 64MB 34MB 1536MB LVDS1 DP2 Intel HD Graphics 5000 1 260a0005 0500260a 3 32MB 19MB 1536MB LVDS1 DP2 Intel HD Graphics 5000 2 260a0006 0600260a 3 32MB 19MB 1536MB LVDS1 DP2 Intel Iris Graphics 5100 2e0a0008 08002e0a 3 64MB 34MB 1536MB LVDS1 DP2 Intel Iris Pro Graphics 5200 260d0007 0700260d 4 64MB 34MB 1536MB LVDS1 DP2 HDMI1 Intel Iris Pro Graphics 5200 260d0009 0900260d 1 64MB 34MB 1536MB LVDS1 Intel Iris Pro Graphics 5200 260d000e 0e00260d 4 96MB 34MB 1536MB LVDS1 DP2 HDMI1 Intel Iris Pro Graphics 5200 260d000f 0f00260d 1 96MB 34MB 1536MB LVDS1 Special Notes: 1: to be used usually with HD5000, HD5100 and HD5200 The device-id of these devices should be supported already by the native macOS drivers. 2: to be used usually with HD4200, HD4400 and HD4600. You must use device-id = 12040000 In some cases, just using these values directly would cause some glitches to show up, to mitigate them, we change the size of the cursor byte: framebuffer-patch-enable = 1 (as a Number) framebuffer-cursor = 00009000 (as Data) We change the cursor byte from 6MB (00006000) to 9MB because of some glitches. PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Haswell example, we chose the MacBookPro11,1 SMBIOS. The typical breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBookAir6,1 Dual Core 15w iGPU: HD 5000 11\" MacBookAir6,2 Dual Core 15w iGPU: HD 5000 13\" MacBookPro11,1 Dual Core 28w iGPU: Iris 5100 13\" MacBookPro11,2 Quad Core 45w iGPU: Iris Pro 5200 15\" MacBookPro11,3 Quad Core 45w iGPU: Iris Pro 5200 + dGPU: GT750M 15\" MacBookPro11,4 Quad Core 45w iGPU: Iris Pro 5200 15\" MacBookPro11,5 Quad Core 45w iGPU: Iris Pro 5200 + dGPU: R9 M370X 15\" Note: Mobile users should refer to the SMBIOS page on which to choose: Mobile SMBIOS Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro11,1 SMBIOS Info # ####################################################### Type: MacBookPro11,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"OpenCore/config-laptop.plist/broadwell.html":{"url":"OpenCore/config-laptop.plist/broadwell.html","title":"Broadwell","keywords":"","body":"Broadwell Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, for us we care about enabling SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and certain Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Unlisted iGPU 06160002 02000616 3 34MB 21MB 1536MB LVDS1 DP2 Unlisted iGPU 0e160001 01000e16 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 5600 12160003 03001216 4 34MB 21MB 1536MB LVDS1 DP2 HDMI1 Intel HD Graphics 5500 16160002 02001616 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 5300 1e160001 01001e16 3 38MB 21MB 1536MB LVDS1 DP2 Intel Iris Pro Graphics 6200 22160002 02002216 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 6000 26160002 02002616 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 6000 26160005 05002616 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 6000 * 26160006 06002616 3 34MB 21MB 1536MB LVDS1 DP2 Intel Iris Graphics 6100 2b160002 02002b16 3 34MB 21MB 1536MB LVDS1 DP2 Sepcial Notes: For HD5300, HD5500 and HD6000, you do not have to specify any device-id For HD5600 you need device-id faked to 26160000 In some cases where you cannot set the DVMT-prealloc of these cards to 96MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties Key Type Value framebuffer-patch-enable Number 1 framebuffer-stolenmem Data 00003001 framebuffer-fbmem Data 00009000 PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Broadwell example, we chose the MacBookPro12,1 SMBIOS. The typical breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBook8,1 Dual Core 7w(Low End) iGPU: HD 5300 12\" MacBookAir7,1 Dual Core 15w iGPU: HD 6000 11\" MacBookAir7,2 Dual Core 15w iGPU: HD 6000 13\" MacBookPro12,1 Dual Core 28w(High End) iGPU: Iris 6100 13\" MacBookPro11,2 Quad Core 45w iGPU: Iris Pro 5200 15\" MacBookPro11,3 Quad Core 45w iGPU: Iris Pro 5200 + dGPU: GT750M 15\" MacBookPro11,4 Quad Core 45w iGPU: Iris Pro 5200 15\" MacBookPro11,5 Quad Core 45w iGPU: Iris Pro 5200 + dGPU: R9 M370X 15\" Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro12,1 SMBIOS Info # ####################################################### Type: MacBookPro12,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"OpenCore/config-laptop.plist/skylake.html":{"url":"OpenCore/config-laptop.plist/skylake.html","title":"Skylake","keywords":"","body":"Skylake Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, for us we care about enabling SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and certain Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Intel HD Graphics 530 12190000 00001219 3 34MB 21MB 1536MB DUMMY1 DP2 Intel HD Graphics 520 16190000 00001619 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 520 16190002 02001619 3 57MB 0MB 1536MB LVDS1 DP2 Intel HD Graphics 530 * 1b190000 00001b19 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 530 1b190006 06001b19 1 38MB 0MB 1536MB LVDS1 Intel HD Graphics 515 1e190000 00001e19 3 34MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 515 1e190003 03001e19 3 40MB 0MB 1536MB LVDS1 DP2 Intel Iris Graphics 540 26190000 00002619 3 34MB 21MB 1536MB LVDS1 DP2 Intel Iris Graphics 540 26190002 02002619 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Graphics 540 26190004 04002619 3 34MB 0MB 1536MB LVDS1 DP2 Intel Iris Graphics 540 26190007 07002619 3 34MB 0MB 1536MB LVDS1 DP2 Intel Iris Graphics 550 27190000 00002719 3 34MB 21MB 1536MB LVDS1 DP2 Intel Iris Graphics 550 27190004 04002719 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Pro Graphics 580 3b190000 00003b19 3 34MB 21MB 1536MB LVDS1 DP2 Intel Iris Pro Graphics 580 3b190005 05003b19 4 34MB 21MB 1536MB LVDS1 DP3 Special Notes: For HD515, HD520, HD530 and HD540, you do not need to use device-id faking, they're natively recognised. I would recommend you keep the AAPL,ig-platform-id automatically recognised for each device-id by commenting/removing its entry in the config, otherwise it is recommended to choose 00001619. For HD510 you may need to use device-id=02190000 to fake its device-id. You would need also to use AAPL,ig-platform-id=00001B19 or 00001619 For HD550 and P530 (and potentially all HD P-series iGPUs), you may need to use device-id=16190000(recommended) or 12190000 or 26190000 or 1b190000 The choice of device-id may help with usable screen on boot up and on wake. For example Lenovo ThinkPad P50 with Xeon CPU will only properly work with 1619. For example Dell Precision 7710 with i7 CPU has issues when set to 1619, using 1b19 or something else may help. It is also recommended using 2619 with Xeon iGPUs. You may also pair it with a proper AAPL,ig-platform-id=00001619(recommended) or 00001219 or 00002619 or 00001b19 In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties | Key | Type | Value | | :--- | :--- | :--- | | framebuffer-patch-enable | Number | 1 | | framebuffer-stolenmem | Data | 00003001 | | framebuffer-fbmem | Data | 00009000 | PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Skylake example, we'll choose the MacBookPro13,1 SMBIOS. The typical breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBook9,1 Dual Core 7w(Low End) iGPU: HD 515 12\" MacBookPro13,1 Dual Core 15w(Low End) iGPU: Iris 540 13\" MacBookPro13,2 Dual Core 15w(High End) iGPU: Iris 550 13\" MacBookPro13,3 Quad Core 45w iGPU: HD 530 + dGPU: RP450/455 15\" Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro13,1 SMBIOS Info # ####################################################### Type: MacBookPro13,1 Serial: C02S3HYWGG7L Board Serial: C02629102GUGPF7AD SmUUID: 3508AD44-B67D-4AD7-A109-7955130A1033 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"OpenCore/config-laptop.plist/kaby-lake.html":{"url":"OpenCore/config-laptop.plist/kaby-lake.html","title":"Kaby Lake","keywords":"","body":"Kaby Lake Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio Quirks: Settings relating to boot.efi patching and firmware fixes, for us we care about enabling SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values and generally useful especially on HEDT and Xeon systems DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and certain Coffeelake systems ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Intel HD Graphics 620 16590000 00001659 3 34MB 0MB 1536MB LVDS1 DP2 Intel HD Graphics 620 16590009 09001659 3 38MB 0MB 1536MB LVDS1 DP2 Unlisted iGPU 18590002 02001859 0 0MB 0MB 1536MB Connector: Intel HD Graphics 630 1b590000 00001b59 3 38MB 21MB 1536MB LVDS1 DP2 Intel HD Graphics 630 1b590006 06001b59 1 38MB 0MB 1536MB LVDS1 Unlisted iGPU 1c590005 05001c59 3 57MB 0MB 1536MB LVDS1 DP2 Intel HD Graphics 615 1e590000 00001e59 3 34MB 0MB 1536MB LVDS1 DP2 Intel HD Graphics 615 1e590001 01001e59 3 38MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 640 26590002 02002659 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 650 27590004 04002759 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 650 27590009 09002759 3 38MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 617 C0870000 0000C087 3 34MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 617 C0870005 0500C087 3 57MB 0MB 1536MB LVDS1 DP2 Special Notes: For HD615, HD620, HD630, HD640 and HD650 it is not needed to use a device-id, however due to many issues with different setups it is recommended to use: device-id=1b590000 or 16590000 AAPL,ig-platform-id=00001659 or 00001b59 (you can try whichever works the best, some even try to cross the device-id and the ig-platform-id) For HD620 users, they can skip the part above (unless you get issues) For UHD620 users, you must use: device-id=87C00000 AAPL,ig-platform-id=0000C087 Note: UHD630 IS NOT KabyLake, it's CoffeeLake (check next section). For all HD6** (UHD users are not concerned), there are some small issues with output where plugging anything would cause a lock up (kernel panic), here are some patches to mitigate that (credit Rehabman): 0306 to 0105 (will probably explain what it does one day) | Key | Type | Value | | :--- | :--- | :--- | | framebuffer-con1-enable | Number | 1 | | framebuffer-con1-alldata | Data | 01050A00 00080000 87010000 02040A00 00080000 87010000 FF000000 01000000 20000000 | 0204 to 0105 (will probably explain what it does one day) | Key | Type | Value | | :--- | :--- | :--- | | framebuffer-con1-enable | Number | 1 | | framebuffer-con1-alldata | Data | 01050A00 00080000 87010000 03060A00 00040000 87010000 FF000000 01000000 20000000 | In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties | Key | Type | Value | | :--- | :--- | :--- | | framebuffer-patch-enable | Number | 1 | | framebuffer-stolenmem | Data | 00003001 | | framebuffer-fbmem | Data | 00009000 | PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Kaby Lake example, we'll chose the MacBookPro14,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBookPro14,1 Dual Core 15w(Low End) iGPU: Iris Plus 640 13\" MacBookPro14,2 Dual Core 15w(High End) iGPU: Iris Plus 650 13\" MacBookPro14,3 Quad Core 45w iGPU: HD 630 + dGPU: RP555/560 15\" Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro14,1 SMBIOS Info # ####################################################### Type: MacBookPro14,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"OpenCore/config-laptop.plist/coffee-lake.html":{"url":"OpenCore/config-laptop.plist/coffee-lake.html","title":"Coffee Lake(8th Gen)","keywords":"","body":"Coffee Lake Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section. Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are DevirtualiseMmio and SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffeelake DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems' If on Z390, enable this quirk ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Intel UHD Graphics 630 003E0000 0000003E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 923E0000 0000923E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 923E0009 0900923E 3 57MB 0MB 1536MB LVDS1 DUMMY2 Intel UHD Graphics 630 9B3E0000 00009B3E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 9B3E0006 06009B3E 1 38MB 0MB 1536MB LVDS1 DUMMY2 Intel UHD Graphics 630 9B3E0009 09009B3E 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 655 A53E0000 0000A53E 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 655 A53E0004 0400A53E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 A53E0005 0500A53E 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 655 A53E0009 0900A53E 3 57MB 0MB 1536MB LVDS1 DP2 Unlisted iGPU A63E0005 0500A63E 3 57MB 0MB 1536MB LVDS1 DP2 Special Notes: For UHD630 you may not need to fake the device-id as long as it's 8086:9B3E, if it's anything else, you may use device-id=9B3E0000 For UHD620 in a Comet Lake CPU requires: device-id=9B3E0000 AAPL,ig-platform-id=00009B3E PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake example, I chose the MacBookPro15,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBookPro15,1 Hexa Core 45w iGPU: UHD 630 + dGPU: RP555/560X 15\" MacBookPro15,2 Quad Core 15w iGPU: Iris 655 13\" MacBookPro15,3 Hexa Core 45w iGPU: UHD 630 + dGPU: Vega16/20 15\" MacBookPro15,4 Quad Core 15w iGPU: Iris 645 13\" Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro15,1 SMBIOS Info # ####################################################### Type: MacBookPro15,1 Serial: C02XG0FDH7JY Board Serial: C02839303QXH69FJA SmUUID: DBB364D6-44B2-4A02-B922-AB4396F16DA8 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "},"OpenCore/config-laptop.plist/coffee-lake-plus.html":{"url":"OpenCore/config-laptop.plist/coffee-lake-plus.html","title":"Coffee Lake Plus(9th Gen)","keywords":"","body":"Coffee Lake Plus Supported version: 0.5.7 Starting Point So making a config.plist may seem hard, its not. It just takes some time but this guide will tell you how to configure eveything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore: All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default. The Sample.plist cannot be used As-Is, you must configure it to your system DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists! Now with all that, we'll need some things to get started: ProperTree: For editing our config, this editor has some super useful tools for OpenCore GenSMBIOS: For generating our SMBIOS Sample.plist: This is found under the Docs folder of the release download Now with those downloaded, we can get to really get started: Grab the Sample.plist and rename to config.plist Open your new config.plist in ProperTree macOS: ProperTree.command Windows: ProperTree.bat Run the Clean Snapshot function(Cmd/Ctrl + Shift + R and point it at your EFI/OC folder), This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config Cmd+R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, its even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management on Haswell and newer, Clover alternative would be under Acpi -> GenerateOptions -> PluginType SSDT-AWAC This is the 300 series RTC patch, required for 9t gen and newer boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. SSDT-PMC 9th gen and newer don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect Note that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/ACPI. For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This blocks certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers (Laptop) Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings relating to ACPI, leave everything here as default. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section. Quirks: Settings relating to boot.efi patching and firmware fixes, ones we need to change are DevirtualiseMmio and SetupVirtualMap AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: YES Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffeelake DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, you can verify here if yours works DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProtectSecureBoot: NO Fixes secureboot keys on MacPro5,1 and Insyde firmwares ProtectUefiServices: NO Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems' If on Z390, enable this quirk ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOS: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via WhateverGreen's Framebuffer Patching Guide and is used for fixing certain iGPU properties like ig-platform-id. The way we get the proper value for this is to look at the framebuffer we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA iGPU device-id AAPL,ig-platform-id Port Count Stolen Memory Framebuffer Memory Video RAM Connectors Intel UHD Graphics 630 003E0000 0000003E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 923E0000 0000923E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 923E0009 0900923E 3 57MB 0MB 1536MB LVDS1 DUMMY2 Intel UHD Graphics 630 9B3E0000 00009B3E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 9B3E0006 06009B3E 1 38MB 0MB 1536MB LVDS1 DUMMY2 Intel UHD Graphics 630 9B3E0009 09009B3E 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 655 A53E0000 0000A53E 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 655 A53E0004 0400A53E 3 57MB 0MB 1536MB LVDS1 DP2 Intel UHD Graphics 630 A53E0005 0500A53E 3 57MB 0MB 1536MB LVDS1 DP2 Intel Iris Plus Graphics 655 A53E0009 0900A53E 3 57MB 0MB 1536MB LVDS1 DP2 Unlisted iGPU A63E0005 0500A63E 3 57MB 0MB 1536MB LVDS1 DP2 Special Notes: For UHD630 you may not need to fake the device-id as long as it's 8086:9B3E, if it's anything else, you may use device-id=9B3E0000 For UHD620 in a Comet Lake CPU requires: device-id=9B3E0000 AAPL,ig-platform-id=00009B3E PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: Leave this blank CpuidData: Leave this blank Block: Blocks kexts from loading. Not relevant for us Patch: Patches both the kernel and kexts Quirks: Settings relating to the kernel, for us we'll be enabling AppleCpuPmCfgLock, AppleXcpmCfgLock, DisableIOMapper, PanicNoKextDump, PowerTimeoutKernelPanic and XhciPortLimit. Everything else should be left as default AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIoMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina DummyPowerManagement: NO New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore ExternalDiskIcons: NO External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (Leave everything as default) HibernateMode: None Best to avoid hibernation with Hackintoshes all together PickerMode: Builtin Sets OpenCore to use the builtin picker HideAuxiliary: NO Hides Recovery and other partitions unless spacebar is pressed, more closely matches real Mac behaviour HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PickerAttributes: Sets OpenCore's UI color, won't be covered here but see 8.3.8 of Configuration.pdf for more info PickerAudioAssist: NO Used for enabling VoiceOver like support in the picker, unless you want your hack talking to you keep this disabled PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use OpenUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key TakeoffDelay: 0 Used to add a delay for hotkeys when OpenCore is a bit to fast to register, 5000-10000 microseconds is the prefered range for users with broken hotkeys support Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection Debug: Helpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay) AppleDebug: YES Enables boot.efi logging, useful for debuuging. Note this is only supported on 10.15.4 and newer DisableWatchDog: YES Disables the UEFI watchdog, can help with early boot issues Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory, do not skip We'll be changing AllowNvramReset, AllowSetDefault, RequireSignature, RequireVault and ScanPolicy AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a security risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore Vault: Optional We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USBs with this set to default Tools Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you. For us, we won't be using any tools Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: OpenShell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Won't be covered here, see 8.6 of Configuration.pdf for more info NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, mainly used for UI Scaling) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) DefaultBackgroundColor: Background color used by boot.efi 00000000: Syrah Black BFBFBF00: Light Gary 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100- this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can hopefully glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Disables all other GPUs besides the integrated GPU, needed as the dGPUs in laptops are not supported csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 03000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best security practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD, Intel and Kepler GPU users should delete this section. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX Key Type Value prev-lang:kbd String en-US:0 Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake Plus example, I chose the MacBookPro16,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows: SMBIOS CPU Type GPU Type Display Size MacBookPro16,1 Hexa/Octa Core 45w iGPU: UHD 630 + dGPU: 5300/5500M 15\" MacBookPro15,2 Quad Core 15w iGPU: Iris 655 13\" Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro16,1 SMBIOS Info # ####################################################### Type: MacBookPro16,1 Serial: C02XG0FDH7JY Board Serial: C02839303QXH69FJA SmUUID: DBB364D6-44B2-4A02-B922-AB4396F16DA8 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: \"Invalid Serial\" or \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates Platforminfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections Generic: SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Only drivers present here should be: HfsPlus.efi ApfsDriverLoader.efi OpenRuntime.efi Audio: Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS AudioSupport: NO Used for enabling the audio port out, this requires AudioOut AudioDevice: [Blank] This will be the PciRoot of your audio device, gfxutil and debug log are great ways to find this AudioCodec: 0 Specify your audio codec address, can be found in either debug log or with under IOHDACodecAddress in IOService AudioOut: 0 Specifies which output is used, use the debug log to see what your board has Same idea, can be found in either debug log or with HdaCodecDump.efi MinimumVolume: 20 Default sound level for audio output PlayChime: NO Emulates the iconic Mac startup sound This also requires AXEFIAudio_VoiceOver_Boot.wav under EFI/OC/Resources/Audio VolumeAmplifier: 0 Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000, see Configuration.pdf for more info on calculation Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyFiltering: NO Verifies and discards uninitialised data, mainly prevalent on 7 series Gigabyte boards KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with OpenUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Output: Relating to visual output TextRenderer: BuiltinGraphics Used for fixing resoltuion of OpenCore itself, Resolution must be set to Max to work correctly ConsoleMode: [Blank] Specifies Console output size, best to keep it blank Resolution: Max Sets OpenCore's resolution, Max will use the highest avalible reolution or can be specified (WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080)) ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that this is only required in cases when using System TextRenderer IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs, only relevant for users using System TextRenderer ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for graphical output once the kernel takes over DirectGopRendering: NO Use builtin graphics output protocol renderer for console, mainly relevant for MacPro5,1 users ReconnectOnResChange: NO ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: NO Fixes High resolutions displays that display OpenCore in 1024x768, only relevant for users using System TextRenderer Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 3000 - 5000 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Sanity check: So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something: Sanity Checker Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Post-install "}}