{"./":{"url":"./","title":"Overview","summary":"page description","keywords":"","body":"Please note this guide is currently far from finished Overview So you want to hackintosh a laptop? Can't wrap your head around RehabMan's confusing guides? Well, here's the vanila laptop guide for you. This guide will explain everything you need to know to hackintosh a laptop. For Windows and Linux we will use the internet install method, and for macOS we will use createinstallmedia (offline install). Before you begin KNOW YOUR HARDWARE We can't stress this enough. If you don't know your hardware and don't know how to find it, hackintoshing probably isn't for you. READ TWICE AND CAREFULLY BEFORE ASKING This is not a very welcoming community for people who do not want to do some self-study and learn from other's findings and instead wait for someone to spoon-feed them information and make things work for them. Read The Fucking Manual and work your way through it and do some intense googling. If you're ready, get to the next step. Good Luck! ðŸŽŠ "},"overview/whatdis.html":{"url":"overview/whatdis.html","title":"What is this","keywords":"","body":"What is this whole mess? Glad you asked! As you may know, real Macs run macOS (if you say iOS, you can just close this tab/window and go back), and that OS is crafted specifically for those devices. However, some of us may have been an old Mac user or uses Mac-specific applications or is used to using macOS for various reasons, but don't want to spend $$$$ on a laptop that is expensive and may break and there is no way to get data back once it's messed up cough MBP13,x+ cough. With this guide, you'll be taught how to install macOS on your intel powered laptop, and it will include the following: Overview Will it work on your hardware? What's the limitations? Guide Overview Disclaimer (yes, we wont be held responsible for your actions basically) Requirements Terminology Preparation Preparing the destination computer Overview on the installer making guide Making the installer Configuring the Boot Manager Installation Installation process Post Installation Installing the rest Fixes Basic ACPI patches Power Management tweaks VoodooI2C troubleshooting Beatify your booting OS Useful Links "},"overview/compatibility.html":{"url":"overview/compatibility.html","title":"Hardware compatibility","keywords":"","body":"Hardware compatibility This guide will cover laptops with Intel Core CPUs from Sandy Bridge and above. Laptops with AMD CPUs are not supported because of the limitations covered in macOS limitations. CPUs that are not supported by this guide: AMD laptop CPUs Intel Pentium Intel Celeron Intel ATOM ARM devices "},"overview/macos-limits.html":{"url":"overview/macos-limits.html","title":"macOS limitations","keywords":"","body":"macOS limitations With laptops, there are several limitations regarding hardware that will not work. Low End iGPUs With macOS, support for iGPUs start at the GT2 tier, this means many low end iGPUs found on Celerons and Pentiums will not work. For a full list, see the GPU Buyers Guide Fingerprint sensors There is no way to emulate the Touch ID sensor as of currently, so fingerprint sensors will not work. Discrete GPUs 90% of discrete GPUs will not work because they are wired in a configuration that macOS doesn't support (switchable graphics). With NVIDIA discrete GPUs, this is usually called Optimus. It is not possible to utilize these dGPUs for the internal display, so it is generally advised to disable them and power them off (will be covered later in this guide.) However, in some cases, the discrete GPU powers any external outputs (HDMI, mini DisplayPort, etc.), which may or may not work; in the case that it will work, you will have to keep the card on and running. However, there are some laptops which rarely do not have switchable graphics, so the discrete card can be used (if supported by macOS), but the wiring and setup usually causes issues. AMD CPU laptops AMD CPU laptops, while theoretically able to work, are not practical for the following reasons: No CPU power management, so battery life will be bad Non-native support, requiring kernel patches, resulting in delayed updates No support for AMD integrated graphics (Radeon R5, R7, etc.) Most WiFi cards Most WiFi cards that come with laptops are not supported as they are usually Intel/Qualcomm. If you are lucky, you may have a supported Atheros card, but support only runs up to High Sierra (Mojave works with AirportAtheros40 from High Sierra, but not with Catalina). The best option is getting a Broadcom card; see MykolaG's WiFi buyer's guide for recommendations. Samsung PM981 NVMe SSDs These SSDs are not compatible (causing kernel panics) and they need updated firmware for a fix; however, since it is a OEM SSD Samsung does not release firmware to end users and no OEM has been found shipping firmware with a fix. On a related note, Samsung 970 EVO Plus NVMe SSDs also had the same problem but it was fixed in a firmware update; get the update (Windows via Samsung Magician or bootable ISO) here. Also to note, laptops that use Intel Optane Memory or Micron 3D XPoint for HDD acceleration are unsupported in macOS. These drives MUST be removed or else macOS won't boot at all. Thunderbolt USB C ports (Hackintosh) Thunderbolt support is currently still iffy in macOS, even more so with Alpine Ridge controllers, which most current laptops have. There have been attempts to keep the controller powered on, which allows Thunderbolt and USB C hotplug to work, but it comes at the cost of kernel panics and/or USB C breaking after sleep. If you want to use the USB C side of the port and be able to sleep, you must plug it in at boot and keep it plugged in. Note: This does not apply to USB C only ports - only Thunderbolt 3 and USB C combined ports. Windows Hello Face Recognition Some laptops come with WHFR that is I2C connected (and used through your iGPU), those will not work. Some laptops come with WHFR that is USB connected, if you're lucky, you may get the camera functionality, but nothing else. Intel Smart Sound Technology Laptops with Intel SST will not have anything connected through them (usually internal mic) work, as it is not supported. You can check with Device Manager on Windows. Headphone Jack Combo Some laptops with a combo headphone jack may not get Audio Input through them and will have to either use the built-in microphone or an external Audio Input device through USB. "},"overview/process-overview.html":{"url":"overview/process-overview.html","title":"How does it go?","keywords":"","body":"How does it go? Download macOS Make the installer Install Clover and configure kexts, config.plist and drivers Boot the installer Install Boot the macOS partition More install Postinstall "},"overview/disclaimer.html":{"url":"overview/disclaimer.html","title":"Disclaimer","keywords":"","body":"Disclaimer We are not responsible for bricked devices, dead hard drives, thermonuclear war, or you getting fired because you got a kernel panic and didn't save your work. You are responsible for reading everything carefully before you do anything. Do your research and ask for support if you have any questions or issues before trying random things on the internet because \"it's the internet\". If you do, YOU are choosing to follow random things on the internet, and if YOU point the finger at us for messing up your device, WE will laugh at you. "},"overview/requirements.html":{"url":"overview/requirements.html","title":"Requirements","keywords":"","body":"Requirements Before you start tinkering with your laptop, make sure you have prepared the following: Physical requirements [CRUCIAL] A functioning brain [CRUCIAL] Time and patience. Don't start working on this if you have deadlines or important work. We are not responsible of the waste of time and any data lost during this process. [CRUCIAL] KNOW YOUR HARDWARE Your CPU name, generation Your RAM size (and slots used if needed) Your GPUs (All of them, Intel, AMD, Nvidia. You may have 2 GPUs, only the Intel one will work, no questions asked) Your storage devices (HDD/SSD, SATA/M.2, NVME/AHCI/RAID/IDE configuration. Note: Only NVME and AHCI/M.2 or AHCI/SATA will work. Other configurations may be harder to get by. RST users need to disable it, it can be named Intel Rapid Storage, RST or RAID) Your screen resolution Your audio codec Your laptop model Your LAN or Ethernet chipset Your WLAN/BT chipset [CRUCIAL] A BASIC KNOWLEDGE ON COMMAND LINES AND HOW TO USE A TERMINAL/COMMAND PROMPT This is not just [CRUCIAL], this is the basis of this whole guide. Don't come crying at me because you don't know how to cd to a directory or delete a file. [CRUCIAL] A machine that is compatible as seen in the Compatibilty section. [CRUCIAL] A minimum of: 8GB USB if you're going to follow the offline method 4GB USB if you're going to follow the online method Note: if you have a rooted android phone, look for DriveDroid, and make sure you have a shared internal storage (no separate /data partition) usually all phones made after 2012 should be like that, so if yours is fairly new it will handle it just fine. Note2: use a USB2.0 drive, HDDs may not be a good choice, also if you don't have any USB2.0, plug the USB in a USB2.0 port if available, or use a USB extension cord that doesn't support USB3.0, this way the USB3.0 drive will run in USB2.0 mode. [CRUCIAL] An Ethernet connection (no wifi, no wifi dongles, Ethernet USB adapter may work depending on macOS support) and you must know your LAN card's model (and your internet speed) You must either have a physical lan port, or a compatible macOS ethernet dongle/adapter, or in case your have a compatible wifi card, it's also good but not recommended (unless it's the only way to go) For people who can't use ethernet but have an android phone, you can connect your android phone to WiFi and then tether it using USB. For iOS users: (taken from Carcraftz) iOS users can do this as well but you need the Tetherme tweak on a jailbroken iPhone. Unfortnunately if you are not on the right version (any ios version up to 12.1.2) this is not possible. :/ A fast internet connection Users have complained of slow or locked up downloads, that's mainly due to slow or unstable internet. This is crucial for the online method, offline can get away with it. A Proper OS Installation: Be it: macOS (a fairly recent one would be better) Windows (Windows 10, 1703 or newer) Linux (with python2.7 or later), make sure it's clean and properly functioning. For online installer, 15GB of free space on the drive you're working on. On Windows, your OS disk (C:) must have 15GB free at least. For offline installer, 30GB of free space on macOS's drive. Some googling skills, which a lot of you lack sadly. Non-physical requirements For offline installer A macOS environment: Hack Mac (recommended) VM (not really recommended, but if you have to, then you gotta use what you have) 30GB of free space Python 2.7 or greater (you already have that on macOS) ProperTree [Recommended]: a simple tool to edit plist files, from /u/corpnewt https://github.com/corpnewt/ProperTree Or text editor: Notepad++, Sublime Text, VSCode... Note: on October/fall 2018 Windows Update, the native notepad can work too. Older versions of windows must use a 3rd party text editor. If you don't know what this is, get a one of the text editors above. For online installer Python 2.7 or greater: For Windows, get it from https://www.python.org/downloads/windows/ and make sure you enable \"add to PATH\" in the install DO NOT use the python release in the Microsoft Store, get it from the official website. For linux users, install it if you don't have it following your distro's tools For macOS users, you already have 2.7+ version installed, no need for extra tools ProperTree [Recommended]: a simple tool to edit plist files, from /u/corpnewt https://github.com/corpnewt/ProperTree Or text editor: Notepad++, Sublime Text, VSCode... Note: on October/fall 2018 Windows Update, the native notepad can work too. Older versions of windows must use a 3rd party text editor. If you don't know what this is, get a one of the text editors above. gibMacOS: a sweet tool from /u/corpnewt https://github.com/corpnewt/gibMacOS if you have git on windows use it to clone the repo if you don't, press Clone or Download button and download as Zip, extract it somewhere Other software requirements will be downloaded thorough the guide (OS specific) "},"overview/terminology.html":{"url":"overview/terminology.html","title":"Terminology","keywords":"","body":"Terminology macOS: Apple's own OS used for Mac machines and \"What makes a Mac a Mac\". Windows: Microsoft's proprietary OS that is used and supported on a wide range of devices (stay with this OS if you don't want headaches) Linux: is a family of open source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is typically packaged in a Linux distribution. (sauce: trusty Wikipedia) Distros: short for Distributions, although it's not something that is bad, Linux distros are how linux is distributed, however when it comes to macOS, it's a mixed macOS installer with a bunch of tools that are not from Apple, do not use macOS Distros Hackintosh: the process of installing macOS onto a PC, note that hackintosh IS NOT the OS, it is also refered to the machine that was \"hacked\" to get macOS running on it. EG: I installed macOS on this Windows machine, therfore I made a hackintosh. But I did NOT install \"hackintosh\". Bootloader: a piece of software that loads an OS, usually made by the OS creators. Clover IS NOT a bootloader per se (explanation down bellow). Boot Manager: a piece of software that manages bootloaders, and we have many of those: Clover, Systemd-boot, OpenCore, rEFInd, rEFIt... CLOVER: a piece of software made by the Clover team that have a lot of features like patching and/or booting macOS/OS X/Mac OS X, Windows and Unix/Linux OSes and many other features. It is the go-to boot manager for hackintoshing. OpenCore: the new hotness on the hackintosh scene, made with security in mind by the Acidanthera team, has faster booting and lighter weight than Clover. It is a lot more involved but also supports many Mac features a lot more natively than Clover (like Hibernation, FileVault2, Boot HotKeys...). ACPI: the Advanced Configuration and Power Interface (ACPI) provides an open standard that operating systems can use to discover and configure computer hardware components, to perform power management by (for example) putting unused components to sleep, and to perform status monitoring. (sauce: trusty Wikipedia) Kexts: also known as Kernel Extensions, it's macOS's drivers. They're used to perform different tasks like device drivers or for a different purpose (in hackintoshing) like patching the OS or injecting information or running tasks. Kexts are not the only playing factor in a good hackintosh, they're sometimes paired with ACPI patches and fixes. BIOS: Basic Input/Output System, is firmware used to perform hardware initialization during the booting process (power-on startup), and to provide runtime services for operating systems and programs. The BIOS firmware comes pre-installed on a personal computer's system board, and it is the first software to run when powered on. (sauce: trusty Wikipedia) It's a Legacy piece of software that was made back in the 70s and still used to this day due to its maturity. UEFI: The Unified Extensible Firmware Interface (UEFI) is a specification that defines a software interface between an operating system and platform firmware. UEFI replaces the legacy Basic Input/Output System (BIOS) firmware interface originally present in all IBM PC-compatible personal computers, with most UEFI firmware implementations providing support for legacy BIOS services. UEFI can support remote diagnostics and repair of computers, even with no operating system installed. (sauce: trusty Wikipedia) UEFI Drivers: Like any other OS, UEFI have drivers and they're loaded by Clover or OpenCore, they're also meant to load devices or perform other tasks like patching macOS's boot.efi and so on. You may find them as Clover Driver or OpenCore Drivers, they're all UEFI drivers. (Note: use the drivers that are meant for that specific boot manager). EFI: It can denote two things: Mac's firmware, which the same as UEFI, but pretty modified for Macs only, so not so \"Universal\" The partition on your hard drive that stores software read by the UEFI to load OSes (like windows bootloader) or UEFI Applications (like Clover), it's FAT32 formatted and has an ID type of EF00 (in hex). Can be named ESP or SYSTEM partition, and it's sized from 100MB to 400MB usually but the size doesn't reflect the function of it (it all depends on the OEMs and OS choices when installing.) MBR: Master Boot Record is a special type of boot sector at the very beginning of partitioned computer mass storage devices like fixed disks or removable drives intended for use with IBM PC-compatible systems and beyond. The concept of MBRs was publicly introduced in 1983 with PC DOS 2.0. The MBR holds the information on how the logical partitions, containing file systems, are organized on that medium. The MBR also contains executable code to function as a loader for the installed operating systemâ€”usually by passing control over to the loader's second stage, or in conjunction with each partition's volume boot record (VBR). This MBR code is usually referred to as a boot loader. (sauce: trusty Wikipedia) This format is used on BIOS/Legacy setups. The MBT format supports a maximum of 2TiB of size and a max of 4 Primary partitions. GPT: GUID Partition Table (GPT) is a standard for the layout of partition tables of a physical computer storage device, such as a hard disk drive or solid-state drive, using universally unique identifiers, which are also known as globally unique identifiers (GUIDs). Forming a part of the Unified Extensible Firmware Interface (UEFI) standard (Unified EFI Forum-proposed replacement for the PC BIOS), it is nevertheless also used for some BIOS systems, because of the limitations of master boot record (MBR) partition tables, which use 32 bits for logical block addressing (LBA) of traditional 512-byte disk sectors. (sauce: trusty Wikipedia) Usually this is the disk format you want to use on a UEFI system. "},"preparations/overview.html":{"url":"preparations/overview.html","title":"Overview","keywords":"","body":"Overview This part of the guide will cover creating a macOS installer, installing and setting up Clover, and firmware settings. "},"preparations/installer-overview.html":{"url":"preparations/installer-overview.html","title":"Installer creation","keywords":"","body":"Installer creation So what components do we need to create a bootable USB? We need: a macOS installer.app (or recovery image for internet install) a bootloader (Clover) We need a macOS installer.app for an offline install, as this will be the installer that we will use to install macOS. A recovery image can also booted, if you'd like to download the rest of the files over the internet, or if you don't have macOS to make the installer from. We also need a bootloader to boot macOS, as we don't have Macs. We will be using Clover for this. "},"preparations/offline-installer.html":{"url":"preparations/offline-installer.html","title":"Preparing an offline installer (macOS only)","keywords":"","body":"Preparing an offline installer (macOS only) What you need: A macOS installer.app, from the App Store OpenCorePkg You can download a prebuilt release (recommended, comes with needed EFI drivers) Or build it manually with ./macbuild.tool You want the DBG (debug) build, as it makes it easier to debug issues. Afterwards, you can switch to a REL (release) build. AppleSupportPkg Same as above, except usually you don't need the debug version as usually there aren't any issues. A plist editor "},"preparations/online-installer.html":{"url":"preparations/online-installer.html","title":"Preparing an online installer","keywords":"","body":""},"OpenCore/ktext.html":{"url":"OpenCore/ktext.html","title":"Gathering Files","keywords":"","body":"Gathering files Last edited: January 30, 2020 This section is for gathering miscellaneous files for booting macOS, we do expect you to know your hardware well before starting Firmware Drivers These are the drivers used for OpenCore, for the majority of systems you only need 3 .efi drivers to get up and running: ApfsDriverLoader.efi Needed for seeing APFS volumes. VboxHfs.efi or HfsPlus.efi Needed for seeing HFS volumes. Do not mix HFS drivers FwRuntimeServices.efi Replacement for AptioMemoryFix.efi, used for patching boot.efi for NVRAM fixes and better memory management. For legacy users: AppleUsbKbDxe.efi Used for OpenCore picker on legacy systems running DuetPkg, not recommended and even harmful on UEFI(Ivy Bridge and newer) NvmExpressDxe.efi Used for Haswell and older when no NVMe driver is built into the firmware XhciDxe.efi Used for Sandy Bridge and older when no XHCI driver is built into the firmware For a full list of compatible drivers, see 11.2 Properties in the OpenCorePkg Docs. These files will go in your Drivers folder in your EFI Kexts A kext is a kernel extension, you can think of this as a driver for macOS, these files will go into the Kexts folder in your EFI All kext listed below can be found pre-compiled in the Kext Repo. Kexts here are compiled each time there's a new commit. Must haves: VirtualSMC Emulates the SMC chip found on real macs, without this macOS will not boot Alternative is FakeSMC which can have better or worse support, most commonly used on legacy hardware. Lilu A kext to patch many processes, required for AppleALC and WhateverGreen and recommended for VirtualSMC VirtualSMC Plugins: SMCProcessor.kext Used for monitoring CPU temperature SMCSuperIO.kext Used for monitoring fan speed SMCLightSensor.kext Used for the ambient light sensor on laptops SMCBatteryManager.kext Used for measuring battery readouts on laptops, requires your battery to be setup. Do not use before battery patching Graphics: WhateverGreen Used for graphics patching, all GPUs benefit from this kext. Audio: AppleALC Used for AppleHDA patching, used for giving you onboard audio. AMD 15h/16h may have issues with this and Ryzen/Threadripper systems rarely have mic support Ethernet: IntelMausiEthernet Required for Intel NICs AtherosE2200Ethernet Required for Atheros and Killer NICs RealtekRTL8111 Required for Realtek NICs USB: USBInjectAll Used for injecting intel USB controllers, H370, B360, H310 and X79/X99/X299 systems will likely need XHCI-unsupported as well. Trackpad: VoodooI2C Keyboard: VoodooPS2Controller WiFi and Bluetooth: AirportBrcmFixup Used for patching non-Apple Broadcom cards, will not work on intel, Killer, Realtek, etc BrcmPatchRAM Used for uploading firmware on broadcom bluetooth chipset, required for all non-Apple Airport cards. To be paired with BrcmFirmwareData.kext BrcmPatchRAM3 for 10.14+ (must be paired with BrcmBluetoothInjector) BrcmPatchRAM2 for 10.11-10.14 BrcmPatchRAM for 10.10 or older Extra's: NVMeFix Used for fixing power management and initialization on non-Apple NVMe, requires macOS 10.14 or newer NoTouchID Required for MacBookPro13,x+/Skylake, helps fix lag at login and authentication dialogs Please refer to Kexts.md for a full list of supported kexts SSDTs So you see all those SSDTs in the AcpiSamples folder and wonder whether you need any of them. For us, we will be going over what SSDTs you need in your specific ACPI section of the config.plist, as the SSDTs you need are platform specific. With some even system specific where they need to be configured and you can easily get lost if I give you a list of SSDTs to choose from now. Getting started with ACPI has an extended section on SSDTs including compiling them on different platforms. Now head to your specific CPU section to setup your config.plist Intel Config.plist Ivy Bridge Haswell Broadwell Skylake Kaby Lake Coffee Lake(8th Gen) Coffee Lake(9th Gen) Comet Lake "},"OpenCore/config.html":{"url":"OpenCore/config.html","title":"OpenCore config","keywords":"","body":"Creating our config Now comes the fun part, making our config.plist. Follow your respective section for configuraing, the typical breakdown of how to follow: Ivy Bridge 3000 series, 2012 era Haswell 4000 series, 2013 era Broadwell 5000 series, 2014 era Skylake 6000 series, 2015-2016 era Kaby Lake 7000 series, 2017 era Coffee Lake(8th Gen) 8000 series, 2017-2018 era Coffee Lake(9th Gen) 9000 series, 2019 era Comet Lake 10000 series, 2019-2020 era "},"OpenCore/ivy-bridge.html":{"url":"OpenCore/ivy-bridge.html","title":"Ivy Bridge","keywords":"","body":"Ivy Bridge Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: CPU-PM Needed for proper CPU power management, you will need to run Pike's ssdtPRGen.sh script to generate this file. This will be run in post install. SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for use we need to block both CpuPm and Cpu0Ist: CpuPm: OemTableId: 437075506d000000 TableLength: 0 TableSignature: 53534454 Enabled: YES Cpu0Ist: OemTableId: 4370753049737400 TableLength: 0 TableSignature: 53534454 Enabled: YES Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0166000A - this is the standard hex for the ig-plat 0A006601 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such. Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majogrity can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Ivy Bridge example, we'll choose the MacBookPro10,1 SMBIOS. The typical breakdown is as follows: MacBookPro10,1 - 45w Quad core MacBookPro10,2 - 15w Dual core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro10,1 SMBIOS Info # ####################################################### Type: MacBookPro10,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: Fix CPU Power Management(run ssdtPRGen.sh and add the SSDT.aml to EFI and config) USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/haswell.html":{"url":"OpenCore/haswell.html","title":"Haswell","keywords":"","body":"Haswell Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0D220003 - this is used when the iGPU is used to drive a display 0300220D when hex-swapped 0x04120004 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 04001204 when hex-swapped I added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS. For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x04120000 - this is the device id for HD 4600 which does have support in macOS 12040000 when hex swapped PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majogrity can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Haswell example, we chose the MacBookPro11,1 SMBIOS. The typical breakdown is as follows: MacBookPro11,1 - 15w Dual core MacBookPro11,2 - 45w Quad core(High End, iGPU) MacBookPro11,3 - 45w Quad core(High End, Nvidia dGPU) MacBookPro11,4 - 45w Quad core(High End, iGPU) MacBookPro11,5 - 45w Quad core(High End, AMD dGPU) Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro11,1 SMBIOS Info # ####################################################### Type: MacBookPro11,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: NO Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/broadwell.html":{"url":"OpenCore/broadwell.html","title":"Broadwell","keywords":"","body":"Broadwell Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x0D220003 - this is used when the iGPU is used to drive a display 0300220D when hex-swapped 0x04120004 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 04001204 when hex-swapped I added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS. For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x04120000 - this is the device id for HD 4600 which does have support in macOS 12040000 when hex swapped PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like desktop Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majogrity can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Broadwell example, we chose the MacBookPro12,1 SMBIOS. Note there were no Quad core Broadwell MacBooks so the typical breakdown is as follows: MacBookPro12,1 - 15w Dual core MacBookPro11,2 - 45w Quad core(High End, iGPU) MacBookPro11,3 - 45w Quad core(High End, Nvidia dGPU) MacBookPro11,4 - 45w Quad core(High End, iGPU) MacBookPro11,5 - 45w Quad core(High End, AMD dGPU) Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro12,1 SMBIOS Info # ####################################################### Type: MacBookPro12,1 Serial: C02M9SYJFY10 Board Serial: C02408101J9G2Y7A8 SmUUID: 7B227BEC-660D-405F-8E60-411B3E4EF055 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: NO Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: YES Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/skylake.html":{"url":"OpenCore/skylake.html","title":"Skylake","keywords":"","body":"Skylake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x19120000 - this is used when the iGPU is used to drive a display 00001219 when hex-swapped 0x19120001 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 01001219 when hex-swapped We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (May need to be set for YES if OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Skylake example, we'll chose the MacBookPro13,1 SMBIOS - There are 3 main SMBIOS used for Skylake: MacBookPro13,1 - 15w Dual core(Low end) MacBookPro13,2 - 15w Dual core(High end) MacBookPro13,3 - 45w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro13,1 SMBIOS Info # ####################################################### Type: MacBookPro13,1 Serial: C02S3HYWGG7L Board Serial: C02629102GUGPF7AD SmUUID: 3508AD44-B67D-4AD7-A109-7955130A1033 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/kaby-lake.html":{"url":"OpenCore/kaby-lake.html","title":"Kaby Lake","keywords":"","body":"Kaby Lake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM like Z390 and such DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artifacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x59120000 - this is used when the iGPU is used to drive a display 00001259 when hex-swapped 0x59120003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 03001259 when hex-swapped PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Block: Removes device properties from the map, for us we can ignore this Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100 - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommeneded to keep blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Kaby Lake example, we'll chose the MacBookPro14,1 SMBIOS - There are 3 main SMBIOS used for Kaby Lake: MacBookPro14,1 - 15w Dual core(Low end) MacBookPro14,2 - 15w Dual core(High end) MacBookPro14,3 - 45w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro14,1 SMBIOS Info # ####################################################### Type: MacBookPro14,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The lengh of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead-but majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/coffee-lake-8th-gen.html":{"url":"OpenCore/coffee-lake-8th-gen.html","title":"Coffee Lake(8th Gen)","keywords":"","body":"Coffee Lake(8th Gen) Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, thanks to SSDT-PMC we no longer need this option DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. I added another section as well that shows a fake device-id for the i3-8100's UHD 630. This has a different device id than the UHD 630 found on the 8700k, for instance, (3e918086 vs 3e928086 ). For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x3e920000 - this is the device id for the UHD 630 found on an 8700k 923e0000 when hex swapped Note: FakeID is only required for High Sierra, Mojave doesn't require this For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. debug=0x100` - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1** - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommended keeping blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake example, I chose the MacBookPro15,1 SMBIOS - There are two main SMBIOS used for 8th gen CPUs: MacBookPro15,1 - 45w Hexa core MacBookPro15,2 - 15w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro15,1 SMBIOS Info # ####################################################### Type: MacBookPro15,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead but the majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/coffee-lake-9th-gen.html":{"url":"OpenCore/coffee-lake-9th-gen.html","title":"Coffee Lake(9th Gen)","keywords":"","body":"Coffee Lake(9th Gen) Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-AWAC This is the 300 series RTC patch, required for most B360, B365, H310, H370, Z390 and some Z370 boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. SSDT-PMC So true 300 series motherboards(non-Z370) don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, thanks to SSDT-PMC we no longer need this option DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. I added another section as well that shows a fake device-id for the i3-8100's UHD 630. This has a different device id than the UHD 630 found on the 8700k, for instance, (3e918086 vs 3e928086 ). For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x3e920000 - this is the device id for the UHD 630 found on an 8700k 923e0000 when hex swapped Note: FakeID is only required for High Sierra, Mojave doesn't require this For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. **debug=0x100` - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS Note: Some Z390 users may need to calculate a slide value to get around \"Couldn't Allocate Runtime\" errors. See Fixing KALSR slide values for more info. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommended keeping blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Coffee Lake example, I chose the MacBookPro16,1 SMBIOS - There are two main SMBIOS used for 9th gen CPUs, note that there are no 13\" 9th gen MacBooks: MacBookPro16,1 - 45w Hexa and Octa core MacBookPro15,2 - 15w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro16,1 SMBIOS Info # ####################################################### Type: MacBookPro16,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead but the majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/comet-lake.html":{"url":"OpenCore/comet-lake.html","title":"Comet Lake","keywords":"","body":"Comet Lake Blame Slav for issues Starting Point You'll want to start with the sample.plist that OpenCorePkg provides you in the DOCS folder and rename it to config.plist. Next, open up your favourite XML editor like ProperTree and we can get to work. Reminder configurators are not supported, most are out of date with the OpenCore spec and some like Mackie's will even add clover sections and corrupt plists. You are on your own if you use such tools Users of ProperTree will also get the benefit of running the Snapshot function which will add all the Firmware drivers, kexts and SSDTs into your config.plist(Cmd/Crtl + R and point to your OC folder). And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default. ACPI Add: This is where you'll add SSDT patches for your system, these are most useful for laptops and OEM desktops but also common for USB maps and such. And with most systems like ours, even required to boot. Guide on making them found here: Getting started with ACPI For us we'll need a couple of SSDTs to bring back functionality that Clover provided: SSDT-PLUG Allows for native CPU power management, Clover alternative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some ACPI tables have theirs starting at PR00 so adjust accordingly. Seeing what device has AppleACPICPU connected first in IORegistryExplorer can also give you a hint SSDT-AWAC This is the 300 series RTC patch, required for most B360, B365, H310, H370, Z390 and some Z370 boards which prevent systems from booting macOS. The alternative is SSDT-RTC0 for when AWAC SSDT is incompatible due to missing the Legacy RTC clock, to check whether you need it and which to use please see Getting started with ACPI page. SSDT-PMC So true 300 series motherboards(non-Z370) don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support and uses the scope PCI0.LPCB, this is the most common scope so a pre-made can be found here: SSDT-PMC.aml SSDT-PNLF Adds brightness control support SSDT-XOSI Used for enabling Windows features in macOS, mainly needed for I2C controllers SSDT-GPIO Creates a stub so VoodooI2C can connect For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well. Block This drops certain ACPI tabes from loading, for us we can ignore this Patch: This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need a couple: EC Rename Needed for Catalina support as it doesn't like the standard one found on most PCs, follow the Fixing Embedded Controllers Guide on how to determine what EC you have and apply the appropriate patches OSI rename This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f Comment String Change _OSI to XOSI Enabled String YES Count Number 0 Limit Nuber 0 Find Data 5f4f5349 Replace Data 584f5349 Quirk: Settings for ACPI. FadtEnableReset: NO Enable reboot and shutdown on legacy hardware, not recommended unless needed NormalizeHeaders: NO Cleanup ACPI header fields, only relevant for macOS High Sierra 10.13 RebaseRegions: NO Attempt to heuristically relocate ACPI memory regions, not needed unless custom DSDT is used. ResetHwSig: NO Needed for hardware that fails to maintain hardware signature across the reboots and cause issues with waking from hibernation ResetLogoStatus: NO Workaround for OEM Windows logo not drawing on systems with BGRT tables. Booter This section is dedicated to quirks relating to boot.efi patching with FwRuntimeServices, the replacement for AptioMemoryFix.efi MmioWhitelist: This section is allowing devices to be passthrough to macOS that are generally ignored, most users can ignore this section. Quirks: AvoidRuntimeDefrag: YES Fixes UEFI runtime services like date, time, NVRAM, power control, etc DevirtualiseMmio: NO Reduces Stolen Memory Footprint, expands options for slide=N values DisableSingleUser: NO Disables the use of Cmd+S and -s, this is closer to the behaviour of T2 based machines DisableVariableWrite: NO Needed for systems with non-functioning NVRAM, thanks to SSDT-PMC we no longer need this option DiscardHibernateMap: NO Reuse original hibernate memory map, only needed for certain legacy hardware EnableSafeModeSlide: YES Allows for slide values to be used in Safemode EnableWriteUnprotector: YES Removes write protection from CR0 register during their execution ForceExitBootServices: NO Ensures ExitBootServices calls succeeds even when MemoryMap has changed, don't use unless necessary ProtectCsmRegion: NO Needed for fixing artefacts and sleep-wake issues, AvoidRuntimeDefrag resolves this already so avoid this quirk unless necessary ProvideCustomSlide: YES If there's a conflicting slide value, this option forces macOS to use a pseudo-random value. Needed for those receiving Only N/256 slide values are usable! debug message SetupVirtualMap: YES Fixes SetVirtualAddresses calls to virtual addresses ShrinkMemoryMap: NO Needed for systems with large memory maps that don't fit, don't use unless necessary SignalAppleOs: NO Tricks the hardware into thinking its always booting macOS, mainly benifitial for MacBook Pro's with dGPUs as booting Windows won't allow for the iGPU to be used DeviceProperties Add: Sets device properties from a map. This section is set up via Headkaze's Intel Framebuffer Patching Guide and applies only one actual property to begin, which is the ig-platform-id. The way we get the proper value for this is to look at the ig-platform-id we intend to use, then swap the pairs of hex bytes. If we think of our ig-plat as 0xAABBCCDD, our swapped version would look like DDCCBBAA The two ig-platform-id's we use are as follows: 0x3E9B0007 - this is used when the iGPU is used to drive a display 07009B3E when hex-swapped 0x3E920003 - this is used when the iGPU is only used for computing tasks and doesn't drive a display 0300923E when hex-swapped Worth noting that for 10.12 -> 10.13.5, you would need to fake the iGPU to the same values in the Kaby Lake guide, as this was before native Coffee Lake iGPU showed up. We also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS. I added another section as well that shows a fake device-id for the i3-8100's UHD 630. This has a different device id than the UHD 630 found on the 8700k, for instance, (3e918086 vs 3e928086 ). For this - we follow a similar procedure as our above ig-platform-id hex swapping - but this time, we only work with the first two pairs of hex bytes. If we think of our device id as 0xAABB0000, our swapped version would look like 0xBBAA0000. We don't do anything with the last 2 pairs of hex bytes. The device-id fake is set up like so: 0x3e920000 - this is the device id for the UHD 630 found on an 8700k 923e0000 when hex swapped Note: FakeID is only required for High Sierra, Mojave doesn't require this For users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page PciRoot(0x0)/Pci(0x1f,0x3) -> Layout-id Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs. For us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present Fun Fact: The reason the byte order is swapped is due to Endianness, specifically Little Endians that modern CPUs use for ordering bytes. The more you know! Block: Removes device properties from the map, for us we can ignore this Kernel Add: Here's where you specify which kexts to load, order matters here so make sure Lilu.kext is always first! Other higher priority kexts come after Lilu such as VirtualSMC, AppleALC, WhateverGreen, etc. A reminder that ProperTree users can run Cmd/Ctrl+R to add all their kexts in the correct order without manually typing each kext out. BundlePath Name of the kext ex: Lilu.kext Enabled Self-explanatory, either enables or disables the kext ExecutablePath Path to the actual executable hidden within the kext, you can see what path you kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that Plist only kexts do not need this filled in. ex: Contents/MacOS/Lilu PlistPath Path to the info.plist hidden within the kext ex: Contents/Info.plist Emulate: Needed for spoofing unsupported CPUs like Pentiums and Celerons CpuidMask: When set to Zero, original CPU bit will be used | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 ex: CPUID 0x0306A9 would be A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 CpuidData: The value for the CPU spoofing FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00 Swap 00 for FF if needing to swap with a longer value Block: Blocks kexts from loading. Sometimes needed for disabling Apple's trackpad driver for some laptops. Patch: Patches both the kernel and kexts (this is where you would add AMD CPU patches). Quirks: AppleCpuPmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be AppleIntelCPUPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmCfgLock: YES Only needed when CFG-Lock can't be disabled in BIOS, Clover counterpart would be KernelPM. Please verify you can disable CFG-Lock, most systems won't boot with it on so requiring use of this quirk AppleXcpmExtraMsrs: NO Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons AppleXcpmForceBoost: NO Forces maximum multiplier, only recommended to enable on scientific or media calculation machines that are constantly under load. Main Xeons benifit from this CustomSMBIOSGuid: NO Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops DisableIOMapper: YES Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina ExternalDiskIcons: YES External Icons Patch, for when internal drives are treated as external drives but can also make USB drives internal. For NVMe on Z87 and below you just add built-in property via DeviceProperties. IncreasePciBarSize: NO Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally expereince a kernel panic on IOPCIFamily if you need this LapicKernelPanic: NO Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC PanicNoKextDump: YES Allows for reading kernel panics logs when kernel panics occur PowerTimeoutKernelPanic: YES Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio. ThirdPartyDrives: NO Enables TRIM, not needed for NVMe but AHCI based drives may require this. Please check under system report to see if your drive supports TRIM XhciPortLimit: YES This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible. The reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such Misc Boot: Settings for boot screen (leave as-is unless you know what you're doing) HibernateMode: None Best to avoid hibernation with Hackintoshes all together HideSelf: YES Hides the EFI partition as a boot option in OC's boot picker PollAppleHotKeys: NO Allows you to use Apple's hotkeys during boot, depending on the firmware you may need to use AppleUsbKbDxe.efi instead of OpenCore's builtin support. Do note that if you can select anything in OC's picker, disabling this option can help. Popular commands: Cmd+V: Enables verbose Cmd+Opt+P+R: Cleans NVRAM Cmd+R: Boots Recovery partition Cmd+S: Boot in Single-user mode Option/Alt: Shows boot picker when ShowPicker set to NO, an alternative is ESC key Timeout: 5 This sets how long OpenCore will wait until it automatically boots from the default selection ShowPicker: YES Shows OpenCore's UI, needed for seeing your available drives or set to NO to follow default option UsePicker: YES Uses OpenCore's default GUI, set to NO if you wish to use a different GUI Debug: Debug has special use cases, leave as-is unless you know what you're doing. DisableWatchDog: YES (Useful for when OpenCore is stalling on something while booting, can also help for early macOS boot issues) Target: 67 Shows more debug information, requires debug version of OpenCore DisplayLevel: 2147483714 Shows even more debug information, requires debug version of OpenCore These values are based of those calculated in OpenCore debugging Security: Security is pretty self-explanatory. AllowNvramReset: YES Allows for NVRAM reset both in the boot picker and when pressing Cmd+Opt+P+R AllowSetDefault: YES Allow CTRL+Enter and CTRL+Index to set default boot device in the picker AuthRestart: NO: Enables Authenticated restart for FileVault2 so password is not required on reboot. Can be concidered a secuirty risk so optional ExposeSensitiveData: 6 Shows more debug information, requires debug version of OpenCore RequireSignature: NO We won't be dealing vaulting so we can ignore RequireVault: NO We won't be dealing vaulting so we can ignore as well ScanPolicy: 0 0 allows you to see all drives available, please refer to Security section for furthur details Tools Used for running OC debugging tools like clearing NVRAM Name Name shown in OpenCore Enabled Self-explanatory, enables or disables Path Path to file after the Tools folder ex: Shell.efi Entries: Used for specifying irregular boot paths that can't be found naturally with OpenCore Name Name shown in boot picker Enabled Self-explanatory, enables or disables Path PCI route of boot drive, can be found with the OpenCoreShell and the map command ex: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\\EFI\\Microsoft\\Boot\\bootmgfw.efi NVRAM Add: 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 (Booter Path, majority can ignore but ) UIScale: 01: Standard resolution(Clover equivalent is 0x28) 02: HiDPI (generally required for FileVault to function correctly on smaller displays, Clover equivalent is 0x2A) 7C436110-AB2A-4BBB-A880-FE41995C9F82 (System Integrity Protection bitmask) boot-args: -v - this enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc. **debug=0x100` - this disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can (hopefully) glean some useful info and follow the breadcrumbs to get past the issues. keepsyms=1 - this is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself. alcid=1 - used for setting layout-id for AppleALC, see supported codecs to figure out which layout to use for your specific system. -wegnoegpu - Hides all non-intel GPUs from macOS Note: Some Z390 users may need to calculate a slide value to get around \"Couldn't Allocate Runtime\" errors. See Fixing KALSR slide values for more info. csr-active-config: Settings for SIP, generally recommended to manually change this within Recovery partition with csrutil via the recovery partition csr-active-config is set to 00000000 which enables System Integrity Protection. You can choose a number of other options to enable/disable sections of SIP. Some common ones are as follows: 00000000 - SIP completely enabled 30000000 - Allow unsigned kexts and writing to protected fs locations E7030000 - SIP completely disabled Recommended to leave enabled for best secuirty practices nvda_drv: <> For enabling Nvidia WebDrivers, set to 31 if running a Maxwell or Pascal GPU. This is the same as setting nvda_drv=1 but instead we translate it from text to hex, Clover equivalent is NvidiaWeb. AMD and Intel GPU users should leave this area blank. prev-lang:kbd: <> Needed for non-Latin keyboards in the format of lang-COUNTRY:keyboard, recommended keeping blank though you can specify it(Default in Sample config is Russian): American: en-US:0(656e2d55533a30 in HEX) Full list can be found in AppleKeyboardLayouts.txt Block: Forcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left. LegacyEnable: NO Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM LegacyOverwrite: NO Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM LegacySchema Used for assigning NVRAM variables, used with LegacyEnable set to YES WriteFlash: YES Enables writing to flash memory for all added variables. Platforminfo For setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application. For this Comet Lake example, I chose the MacBookPro16,1 SMBIOS - There are two main SMBIOS used for 9th gen CPUs, note that there are no 13\" 9th gen MacBooks: MacBookPro16,1 - 45w Hexa and Octa core MacBookPro15,2 - 15w Quad core Run GenSMBIOS, pick option 1. for downloading MacSerial and Option 3. for selecting out SMBIOS. This will give us an output similar to the following: ####################################################### # MacBookPro16,1 SMBIOS Info # ####################################################### Type: MacBookPro16,1 Serial: C02Z2CZ5H7JY Board Serial: C02928701GUH69FFB SmUUID: AA043F8D-33B6-4A1A-94F7-46972AAD0607 The Type part gets copied to Generic -> SystemProductName. The Serial part gets copied to Generic -> SystemSerialNumber. The Board Serial part gets copied to Generic -> MLB. The SmUUID part gets copied toto Generic -> SystemUUID. We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address) Reminder that you want valid serial numbers but those not in use, you want to get a message back like: \"Purchase Date not Validated\" Apple Check Coverage page Automatic: YES Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections SpoofVendor: YES Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case SupportsCsm: NO Used for when the EFI partition isn't first on the windows drive UpdateDataHub: YES Update Data Hub fields UpdateNVRAM: YES Update NVRAM fields UpdateSMBIOS: YES Updates SMBIOS fields UpdateSMBIOSMode: Create Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk UEFI ConnectDrivers: YES Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load. Drivers: Add your .efi drivers here Input: Related to boot.efi keyboard passthrough used for FileVault and Hotkey support KeyForgetThreshold: 5 The delay between each key input when holding a key down, for best results use 5 milliseconds KeyMergeThreshold: 2 The length of time that a key will be registered before resetting, for best results use 2 milliseconds KeySupport: YES Enables OpenCore's built in key support and required for boot picker selection, do not use with AppleUsbKbDxe.efi KeySupportMode: Auto Keyboard translation for OpenCore KeySwap: NO Swaps Option and Cmd key PointerSupport: NO Used for fixing broken pointer support, commonly used for Z87 Asus boards PointerSupportMode: Specifies OEM protocol, currently only supports Z87 and Z97 ASUS boards so leave blank TimerResolution: 50000 Set architecture timer resolution, Asus Z87 boards use 60000 for the interface. Settings to 0 can also work for some Protocols: (Most values can be ignored here as they're meant for real Macs/VMs) AppleSmcIo: NO Reinstalls Apple SMC I/O, this is the equivlant of VirtualSMC.efi which is only needed for users using FileVault ConsoleControl: YES Replaces Console Control protocol with a builtin version, set to YES otherwise you may see text output during booting instead of nice Apple logo. Required for most APTIO firmware FirmwareVolume: NO Fixes UI regarding Filevault, set to YES for better FileVault compatibility HashServices: NO Fixes incorrect cursor size when running FileVault, set to YES for better FileVault compatibility UnicodeCollation: NO Some older firmware have broken Unicode collation, fixes UEFI shell compatibility on these systems(generally IvyBridge and older) Quirks: AvoidHighAlloc: NO Workaround for when te motherboard can't properly access higher memory in UEFI Boot Services. Avoid unless necessary(affected models: GA-Z77P-D3 (rev. 1.1)) ExitBootServicesDelay: 0 Only required for very specific use cases like setting to 5 for ASUS Z87-Pro running FileVault2 IgnoreInvalidFlexRatio: NO Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-skylake based systems IgnoreTextInGraphics: NO Fix for UI corruption when both text and graphics outputs happen, set to YES with SanitiseClearScreen also set to YES for pure Apple Logo(no verbose screen) ProvideConsoleGop: YES Enables GOP(Graphics output Protcol) which the macOS bootloader requires for console handle, required for seeing once the kernel takes over ReleaseUsbOwnership: NO Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Clover equivalent is FixOwnership RequestBootVarFallback: YES Request fallback of some Boot prefixed variables from OC_VENDOR_VARIABLE_GUID to EFI_GLOBAL_VARIABLE_GUID. Used for fixing boot options. RequestBootVarRouting: YES Redirects AptioMemeoryFix from EFI_GLOBAL_VARIABLE_GUID to OC\\_VENDOR\\_VARIABLE\\_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc. ReplaceTabWithSpace: NO Depending on the firmware, some system may need this to properly edit files in the UEFI shell when unable to handle Tabs. This swaps it for spaces instead but the majority can ignore it but do note that ConsoleControl set to True may be needed SanitiseClearScreen: YES Fixes High resolutions displays that display OpenCore in 1024x768, recommended for users with 1080P+ displays ClearScreenOnModeSwitch: NO Needed for when half of the previously drawn image remains, will force black screen before switching to TextMode. Do note that ConsoleControl set to True may be needed UnblockFsConnect: NO Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed Cleaning up And now you're ready to save and place it into your EFI under EFI/OC. For those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal: r/Hackintosh Subreddit r/Hackintosh Discord Intel BIOS settings Disable: Fast Boot VT-d(can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt Intel SGX Intel Platform Trust CFG Lock(MSR 0xE2 write protection)(This must be off, if you can't find the option then enable both AppleCpuPmCfgLock and AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled) Enable: VT-x Above 4G decoding Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off OS type: Windows 8.1/10 UEFI Mode Post-install So what in the world needs to be done once everything is installed? Well here's some things you can do: USB mapping Correcting audio, reread the DeviceProperties on how Enabling FileVault and other security features Fixing iMessage Moving OpenCore from the USB to your main drive Mount USB's EFI Copy EFI folder to the desktop Unmount USB and mount boot drive's EFI Paste EFI onto the root of the drive "},"OpenCore/acpi.html":{"url":"OpenCore/acpi.html","title":"Getting started with ACPI","keywords":"","body":"Getting started with ACPI Last edited: January 30, 2020 A quick explainer on ACPI and how to make SSDTs So what are DSDTs and SSDTs? Well, these are tables present in your firmware that outline hardware devices like USB controllers, CPU threads, embedded controllers, system clocks and such. A DSDT(Differentiated System Description Table) can be seen as the body holding most of the info with smaller bits of info being passed by the SSDT(Secondary System Description Table) So why do we care about these tables? macOS can be very picky about the devices present in the DSDT and so our job is to correct it. The main devices that need to be corrected for macOS to work properly: Embedded controllers(EC) ACPI patch All semi-modern intel machines have an EC exposed in their DSDT, with many AMD systems also having it exposed. These controllers are not compatible with macOS be default so we need to rename to something macOS would like to work with Plugin type SSDT This is used to enable native CPU power management on Intel Haswell and newer CPUs, the SSDT will connect to the first thread of the CPU AWAC system clock. This applies to all Coffee Lake 9th gen series laptops, the specific issue is that newer laptops ship with AWAC clock enabled. This is a problem because macOS cannot communicate with AWAC clocks, so this requires us to either force on the Legacy RTC clock or if unavailable create a fake one for macOS to play with NVRAM SSDT Coffee Lake 9th gen series don't declare the FW chip as MMIO in ACPI and so XNU ignores the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support GPIO SSDT Used for creating a stub to allow VoodooI2C to connect onto XOSI SSDT Used for rerouting OSI calls to this SSDT, mainly used for tricking our hardware into thinking its booting Windows so we get better trackapd support IRQ SSDT and ACPI patch Needed for fixing IRQ conflicts within the DSDT, macOS will not boot on many laptops due to this What SSDTs do each platform need Please see the specific ACPI section of your config.plist, all SSDTs needed are covered there with a breif explainer. SSDTs: The easy way So here we'll be using a super simple tool made by CorpNewt: SSDTTime What this tool does is dumps your DSDT from your firmware, and then creates SSDTs based off your DSDT. This must be done on the target machine running either Windows or Linux So what can't SSDTTime do?: EC Renames: We'll need to manually look at our DSDT to find the ACPI path AWAC and RTC0 SSDTs: Need to find the correct ACPI path PMC SSDT: Need to find the correct ACPI path GPIO SSDT: Luckily this is universal accross all laptops so a prebuilt can be used XOSI SSDT: Same as GPIO, they're universal so a prebuilt can be used For EC renames, AWAC/RTC0 and PMC SSDTs, follow the \"SSDTs: The long way\" Running SSDTTime Run the SSDTTime.bat file as Admin on the target machine and you should see something like this: What are all these options?: 1. FixHPET - Patch out IRQ Conflicts IRQ patching, mainly needed for X79, X99 and laptop users 2. FakeEC - OS-aware Fake EC This is the SSDT-EC, required for Catalina users 3. PluginType - Sets plugin-type = 1 on CPU0/PR00 This is the SSDT-PLUG, for Intel only 4. Dump DSDT - Automatically dump the system DSDT Dumps your DSDT from your firmware What we want to do is select option 4. Dump DSDT first, then select 1. FixHPET, and finally 3. PluginType. This will give us some files, the ones we care about: SSDT-PLUG.aml SSDT-HEPT.aml oc_patches.plist Troubleshooting note: See General Troubleshooting if you're having issues running SSDTTime SSDTs: The long way Well now the fun's over, as we still need some files that SSDTTime couldn't make Getting a copy of our DSDT So to start, we'll need to get a copy of your DSDT from your firmware. This can be found in our SSDTTime folder after running 4. Dump DSDT Compiling and decompiling DSDTs and SSDTs macOS So compiling DSDTs and SSDTs are quite easy with macOS, all you need is MaciASL. To compile, just File -> SaveAs -> ACPI Machine Language Binary(.AML), decompiling is just opening the file in MaciASL. Windows Compiling and decompiling on windows is fairly simple though, you will need iasl.exe and Command Prompt: path/to/iasl.exe path/to/DSDT.aml If compiled .aml file is provided, a decompiled .dsl file will be given and vice versa. Linux Compiling and decompiling with Linux is just as simple, you will need a special copy of iasl and terminal: path/to/iasl path/to/DSDT.aml If compiled .aml file is provided, a decompiled .dsl file will be given and vice versa. Creating ACPI renames SSDTs EC Rename Finding the right EC patch Now that our DSDT is readable, search for PNP0C09. Should give you something similar to this: As you can see our PNP0C09 is found within the Device (EC0) meaning this is the device we want to rename. What happens if multiple PNP0C09 show up When this happens you need to figure out which is the main and which is not, it's fairly easy to figure out. Check each controller for the following properties: _HID _CRS _GPE Note that only the main EC needs renaming, if you only have one PNP0C09 then it is automatically your main regardless of properties. Now lets apply the EC patch! As you can see from the table below, we'll be renaming our EC listed in the DSDT. Do note you cannot just throw random renames without checking first, as this can cause actual damage to your laptop. Comment Find*[HEX] Replace[HEX] change EC0 to EC 4543305f 45435f5f change H_EC to EC 485f4543 45435f5f change ECDV to EC 45434456 45435f5f change PGEC to EC 50474543 45435f5f Inside your config under ACPI -> Patch(replace XXXX with the correct EC patch): Comment String Change XXXX to EC Enabled String YES Count Number 0 Limit Nuber 0 Find Data xxxxxxxx Replace Data 45435f5f PLUG SSDT Intel CPUs only CPU naming is fairly easy to figure out as well, open your decompiled DSDT and search for Processor. This should give you a result like this: As we can see, the first processor in our list is PR00. This is what we'll be applying the plugin-type=1 property too. Now grab SSDT-PLUG and replace the default CPU0 with our PR00. Note that there are 2 mentions of CPU0 in the SSDT. AWAC SSDT This is required for most Coffee Lake 9th gen laptops, double check if you need by reading below What the SSDT-AWAC will do is force enable the Legacy RTC device in macOS, the reason we want to do this is that macOS currently does not support AWAC as a system clock. In some rare cases, there is no Legacy RTC device to force enable so we'll need to create a fake RTC device for macOS to play with using SSDT-RTC0 To determine whether you need SSDT-AWAC or SSDT-RTC0, open your decompiled DSDT and search for Device (AWAC). If you get a result then you have an AWAC system clock present, if nothing shows then no need to continue and no need for this SSDT. Otherwise, continue with the next search for STAS ==: As you can see we found the STAS == in our DSDT, this means we're able to force enable our Legacy RTC. In this case, SSDT-AWAC will be used As-Is with no modifications required. Just need to compile. For systems where no STAS shows up but you do have AWAC, you can use SSDT-RTC0 though you will need to check whether your DSDT uses LPCB, LBC or LBC0. By default it uses LPCB, you can check by just searching for Name (_ADR, 0x001F0000). This address is used for Low Pin Count devices(LPC) but the device name can vary between LPCB, LBC or LBC0. Just search each one in your config and which ever shows up is the one your system uses PMC SSDT This is required for all Coffee Lake 9th gen laptops This SSDT brings back NVRAM support and uses the scope PCI0.LPCB to check what scope your system has, search your DSDT for Name (_ADR, 0x001F0000). This address is used for Low Pin Count devices(LPC) but the device name can vary between LPCB, LBC or LBC0. Just search each one in your config and which ever shows up is the one your system uses Cleaning up Now that we have all our SSDTs compiled, the last thing to do is add our SSDTs to both EFI/OC/ACPI and our config under ACPI -> Add. A reminder that ProperTree users can press the hotkey Cmd/Ctrl+R for automatically adding your SSDTs to the config. A reminder that there is no need to add your DSDT as its already inside your firmware. But wait, there is one more grueling task: merging oc_patches.plist into our config.plist Steps to do this: Open both files, Delete the ACPI -> Patch section from config.plist Copy the ACPI -> Patch section from patches.plist Paste into where old patches were in config.plist "}}